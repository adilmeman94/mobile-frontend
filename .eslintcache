[{"/home/upstrapp-006/Desktop/inventory_system_admin/src/index.js":"1","/home/upstrapp-006/Desktop/inventory_system_admin/src/serviceWorker.js":"2","/home/upstrapp-006/Desktop/inventory_system_admin/src/App.js":"3","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/MainLayout.js":"4","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/Loader.js":"5","/home/upstrapp-006/Desktop/inventory_system_admin/src/store/index.js":"6","/home/upstrapp-006/Desktop/inventory_system_admin/src/history.js":"7","/home/upstrapp-006/Desktop/inventory_system_admin/src/router/routes.js":"8","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/FullpageLayout.js":"9","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/VerticalLayout.js":"10","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/HorizontalLayout.js":"11","/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/constant.js":"12","/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/themeConfig.js":"13","/home/upstrapp-006/Desktop/inventory_system_admin/src/services/api.service.js":"14","/home/upstrapp-006/Desktop/inventory_system_admin/src/router/index.js":"15","/home/upstrapp-006/Desktop/inventory_system_admin/src/services/interceptor.js":"16","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Home.js":"17","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/authentication/ForgotPassword.js":"18","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/authentication/Login.js":"19","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/authentication/register.js":"20","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/customizer/Customizer.js":"21","/home/upstrapp-006/Desktop/inventory_system_admin/src/store/actions/customizer.js":"22","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/navbar/Navbar.js":"23","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/footer/Footer.js":"24","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/vertical-menu/Sidebar.js":"25","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/horizontal-menu/HorizontalMenu.js":"26","/home/upstrapp-006/Desktop/inventory_system_admin/src/store/reducers/index.js":"27","/home/upstrapp-006/Desktop/inventory_system_admin/src/services/index.js":"28","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/checkbox/CheckboxesVuexy.js":"29","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/navbar/NavbarUser.js":"30","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/vertical-menu/SidebarHeader.js":"31","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/radio/RadioVuexy.js":"32","/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/horizontalMenuConfig.js":"33","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/vertical-menu/sidemenu/SideMenuContent.js":"34","/home/upstrapp-006/Desktop/inventory_system_admin/src/store/reducers/auth.js":"35","/home/upstrapp-006/Desktop/inventory_system_admin/src/store/reducers/navbar.js":"36","/home/upstrapp-006/Desktop/inventory_system_admin/src/store/reducers/customizer.js":"37","/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/navigationConfig.js":"38","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/vertical-menu/sidemenu/SideMenuGroup.js":"39","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/TableLoadingText.js":"40","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/Pagination.js":"41","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/user/adminProfile.js":"42","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/user/editAdminProfile.js":"43","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/authentication/changePassword.js":"44","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/wellcome.js":"45","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/SubCategory/categoryPhones.js":"46","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/SubCategory/categoryCovers.js":"47","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Complaint/complaintList.js":"48","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Complaint/addComplaint.js":"49","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/SubCategory/Phones/addPhone.js":"50","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/SubCategory/Phones/editPhone.js":"51","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/purchase/purchase.js":"52","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/purchase/addPurchase.js":"53","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/purchase/editPurchase.js":"54","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/editSales.js":"55","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/sales.js":"56","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/addSales.js":"57","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/addCategory.js":"58","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/stores/storeList.js":"59","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/stores/addStore.js":"60","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/stores/editStore.js":"61","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/categoryList.js":"62","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/stores/viewStore.js":"63","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/Product/productList.js":"64","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/Product/addProduct.js":"65","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/Product/editProduct.js":"66","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Complaint/viewComplaint.js":"67","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Complaint/editComplaint.js":"68","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/editCategory.js":"69","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/viewCategory.js":"70","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/subCategoryList.js":"71","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/addSubCategory.js":"72","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/editSubCategory.js":"73","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/Product/viewProduct.js":"74","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/viewSales.js":"75","/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/utils.js":"76","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/purchase/veiwPurchase.js":"77","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/viewPdfDetail.js":"78","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/generatePdf.js":"79","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/invoiceCard.js":"80","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/sellCount.js":"81","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/productCount.js":"82","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/ui-elements/cards/statistics/RevenueGenerated.js":"83","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/widgets/stats/StatsWithAreaChart.js":"84","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/widgets/stats/ChartOptions.js":"85","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/widgets/avatar/index.js":"86","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/ui-elements/cards/statistics/StatsCard.js":"87","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/avatar/AvatarComponent.js":"88"},{"size":1025,"mtime":1624355457751,"results":"89","hashOfConfig":"90"},{"size":5057,"mtime":1616091482000,"results":"91","hashOfConfig":"90"},{"size":2336,"mtime":1624354420244,"results":"92","hashOfConfig":"90"},{"size":2638,"mtime":1616091482000,"results":"93","hashOfConfig":"90"},{"size":240,"mtime":1616091482000,"results":"94","hashOfConfig":"90"},{"size":518,"mtime":1616091482000,"results":"95","hashOfConfig":"90"},{"size":240,"mtime":1621252157938,"results":"96","hashOfConfig":"90"},{"size":6263,"mtime":1624287953916,"results":"97","hashOfConfig":"90"},{"size":746,"mtime":1616091482000,"results":"98","hashOfConfig":"90"},{"size":8969,"mtime":1616091482000,"results":"99","hashOfConfig":"90"},{"size":7945,"mtime":1621337864563,"results":"100","hashOfConfig":"90"},{"size":241,"mtime":1623307021851,"results":"101","hashOfConfig":"90"},{"size":933,"mtime":1616091482000,"results":"102","hashOfConfig":"90"},{"size":6090,"mtime":1624432596634,"results":"103","hashOfConfig":"90"},{"size":1079,"mtime":1619520742700,"results":"104","hashOfConfig":"90"},{"size":1501,"mtime":1623307210940,"results":"105","hashOfConfig":"90"},{"size":367,"mtime":1624460704594,"results":"106","hashOfConfig":"90"},{"size":3728,"mtime":1623311673371,"results":"107","hashOfConfig":"90"},{"size":9045,"mtime":1624447986898,"results":"108","hashOfConfig":"90"},{"size":10139,"mtime":1623243430048,"results":"109","hashOfConfig":"90"},{"size":17932,"mtime":1616091482000,"results":"110","hashOfConfig":"90"},{"size":812,"mtime":1616091482000,"results":"111","hashOfConfig":"90"},{"size":2863,"mtime":1616091482000,"results":"112","hashOfConfig":"90"},{"size":1116,"mtime":1623157054450,"results":"113","hashOfConfig":"90"},{"size":6850,"mtime":1616091482000,"results":"114","hashOfConfig":"90"},{"size":11441,"mtime":1616091482000,"results":"115","hashOfConfig":"90"},{"size":280,"mtime":1616091482000,"results":"116","hashOfConfig":"90"},{"size":186,"mtime":1616091482000,"results":"117","hashOfConfig":"90"},{"size":975,"mtime":1616091482000,"results":"118","hashOfConfig":"90"},{"size":4047,"mtime":1624443720119,"results":"119","hashOfConfig":"90"},{"size":3477,"mtime":1624018251176,"results":"120","hashOfConfig":"90"},{"size":1059,"mtime":1616091482000,"results":"121","hashOfConfig":"90"},{"size":1291,"mtime":1623761022540,"results":"122","hashOfConfig":"90"},{"size":8787,"mtime":1616091482000,"results":"123","hashOfConfig":"90"},{"size":759,"mtime":1623307807820,"results":"124","hashOfConfig":"90"},{"size":2313,"mtime":1621254903972,"results":"125","hashOfConfig":"90"},{"size":925,"mtime":1616091482000,"results":"126","hashOfConfig":"90"},{"size":1247,"mtime":1623761018236,"results":"127","hashOfConfig":"90"},{"size":6117,"mtime":1616091482000,"results":"128","hashOfConfig":"90"},{"size":874,"mtime":1616091482000,"results":"129","hashOfConfig":"90"},{"size":2480,"mtime":1616091482000,"results":"130","hashOfConfig":"90"},{"size":2752,"mtime":1623159845529,"results":"131","hashOfConfig":"90"},{"size":7182,"mtime":1623411998802,"results":"132","hashOfConfig":"90"},{"size":6896,"mtime":1623223314459,"results":"133","hashOfConfig":"90"},{"size":478,"mtime":1624356250740,"results":"134","hashOfConfig":"90"},{"size":3976,"mtime":1623312053846,"results":"135","hashOfConfig":"90"},{"size":2458,"mtime":1623234363646,"results":"136","hashOfConfig":"90"},{"size":5687,"mtime":1624275069392,"results":"137","hashOfConfig":"90"},{"size":9523,"mtime":1624275251766,"results":"138","hashOfConfig":"90"},{"size":10783,"mtime":1623312322658,"results":"139","hashOfConfig":"90"},{"size":11057,"mtime":1623312250335,"results":"140","hashOfConfig":"90"},{"size":5417,"mtime":1624274664837,"results":"141","hashOfConfig":"90"},{"size":13162,"mtime":1624357198214,"results":"142","hashOfConfig":"90"},{"size":13819,"mtime":1624252608582,"results":"143","hashOfConfig":"90"},{"size":14959,"mtime":1624356784384,"results":"144","hashOfConfig":"90"},{"size":5724,"mtime":1624360637918,"results":"145","hashOfConfig":"90"},{"size":14706,"mtime":1624431160693,"results":"146","hashOfConfig":"90"},{"size":6160,"mtime":1623996558406,"results":"147","hashOfConfig":"90"},{"size":5548,"mtime":1624274504267,"results":"148","hashOfConfig":"90"},{"size":14069,"mtime":1624257889406,"results":"149","hashOfConfig":"90"},{"size":14248,"mtime":1624263308775,"results":"150","hashOfConfig":"90"},{"size":3747,"mtime":1624285505632,"results":"151","hashOfConfig":"90"},{"size":7912,"mtime":1624260378647,"results":"152","hashOfConfig":"90"},{"size":5894,"mtime":1624274467629,"results":"153","hashOfConfig":"90"},{"size":16618,"mtime":1624018103426,"results":"154","hashOfConfig":"90"},{"size":15766,"mtime":1624275885510,"results":"155","hashOfConfig":"90"},{"size":4961,"mtime":1624262282878,"results":"156","hashOfConfig":"90"},{"size":9729,"mtime":1624275316638,"results":"157","hashOfConfig":"90"},{"size":7164,"mtime":1623939272139,"results":"158","hashOfConfig":"90"},{"size":3021,"mtime":1623939391032,"results":"159","hashOfConfig":"90"},{"size":3825,"mtime":1624285494392,"results":"160","hashOfConfig":"90"},{"size":7274,"mtime":1623996709369,"results":"161","hashOfConfig":"90"},{"size":0,"mtime":1623914881423,"results":"162","hashOfConfig":"90"},{"size":8597,"mtime":1624261540325,"results":"163","hashOfConfig":"90"},{"size":8650,"mtime":1624257571225,"results":"164","hashOfConfig":"90"},{"size":2307,"mtime":1616091482000,"results":"165","hashOfConfig":"90"},{"size":8004,"mtime":1624261916604,"results":"166","hashOfConfig":"90"},{"size":6913,"mtime":1624373368281,"results":"167","hashOfConfig":"90"},{"size":1236,"mtime":1624366626029,"results":"168","hashOfConfig":"90"},{"size":10033,"mtime":1624372829601,"results":"169","hashOfConfig":"90"},{"size":2940,"mtime":1624432502166,"results":"170","hashOfConfig":"90"},{"size":2971,"mtime":1624433147680,"results":"171","hashOfConfig":"90"},{"size":2027,"mtime":1624454340767,"results":"172","hashOfConfig":"90"},{"size":1435,"mtime":1624452616805,"results":"173","hashOfConfig":"90"},{"size":1472,"mtime":1611742699000,"results":"174","hashOfConfig":"90"},{"size":3643,"mtime":1611578550000,"results":"175","hashOfConfig":"90"},{"size":4294,"mtime":1624461342887,"results":"176","hashOfConfig":"90"},{"size":1994,"mtime":1616091482000,"results":"177","hashOfConfig":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"181"},"190s0ss",{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"181"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"181"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"181"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"181"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"181"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"181"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"181"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"181"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"181"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"181"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"181"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"181"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"181"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"181"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"181"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"181"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"181"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"181"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"181"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"181"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"181"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"181"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"181"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"181"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"181"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"181"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"181"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"181"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"181"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"181"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"181"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"181"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"181"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"181"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"181"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"181"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"181"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"181"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"181"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"181"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"389"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"389"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/upstrapp-006/Desktop/inventory_system_admin/src/index.js",["399"],"import React, { Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Layout } from \"./layouts/MainLayout\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store } from \"./store\";\r\nimport Loader from \"./components/Loader\";\r\nimport \"./index.scss\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {ToastContainer } from 'react-toastify';\r\nimport { PDFViewer } from \"@react-pdf/renderer\";\r\n\r\n\r\nconst LazyApp = lazy(() => import(\"./App\"));\r\n\r\n// configureDatabase()\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ToastContainer />\r\n    <Suspense fallback={<Loader />}>\r\n      <Layout>\r\n        <LazyApp />\r\n      </Layout>\r\n    </Suspense>\r\n  </Provider>,\r\n\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",["400","401"],"/home/upstrapp-006/Desktop/inventory_system_admin/src/serviceWorker.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/App.js",["402","403","404","405","406"],"import React, { useEffect, useState } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { Redirect, Router, Switch } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport \"react-perfect-scrollbar/dist/css/styles.css\";\r\nimport \"prismjs/themes/prism-tomorrow.css\";\r\nimport { TOKEN_KEY } from \"./configs/constant\";\r\nimport { AuthService } from \"./services/api.service\";\r\nimport Loader from \"./components/Loader\";\r\nimport RouteConfig from \"./router\";\r\nimport { routes, authRoutes } from \"./router/routes\";\r\nimport { history } from \"./history\";\r\nimport ReactPDF from \"@react-pdf/renderer\";\r\nimport { PDFViewer } from \"@react-pdf/renderer\";\r\nimport MyDocument from \"./views/Seller/viewPdfDetail\";\r\n\r\nconst App = (props) => {\r\n  const [showLoader, setShowLoader] = useState(true);\r\n  const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    getProfile();\r\n  }, []);\r\n\r\n  const getProfile = async () => {\r\n    if (localStorage.getItem(TOKEN_KEY)) {\r\n      try {\r\n        const data = await AuthService.getProfile();\r\n        console.log(data);\r\n        dispatch({ type: \"SET_AUTH\", payload: data });\r\n      } catch {\r\n        dispatch({ type: \"PURGE_AUTH\" });\r\n      } finally {\r\n        setShowLoader(false);\r\n      }\r\n    } else {\r\n      setShowLoader(false);\r\n      dispatch({ type: \"PURGE_AUTH\" });\r\n    }\r\n  };\r\n\r\n  if (showLoader) return <Loader />;\r\n\r\n  let pages = null;\r\n  if (isAuthenticated) {\r\n    pages = authRoutes.map((element) => (\r\n      <RouteConfig\r\n        key={element.name}\r\n        path={element.path}\r\n        component={element.component}\r\n        fullLayout={element.fullLayout}\r\n        exact={element.exact}\r\n      />\r\n    ));\r\n  } else {\r\n    pages = routes.map((element) => (\r\n      <RouteConfig\r\n        key={element.name}\r\n        path={element.path}\r\n        component={element.component}\r\n        fullLayout={element.fullLayout}\r\n        exact={element.exact}\r\n      />\r\n    ));\r\n  }\r\n  return (\r\n    // Set the directory path if you are deploying in sub-folder\r\n    <Router history={history}>\r\n      <Switch>\r\n        {pages}\r\n        <Redirect from=\"/\" to={isAuthenticated ? \"/\" : \"/login\"} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n  \r\n  \r\n};\r\n\r\nexport default App;\r\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/MainLayout.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/components/Loader.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/store/index.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/history.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/router/routes.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/FullpageLayout.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/VerticalLayout.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/HorizontalLayout.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/constant.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/themeConfig.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/services/api.service.js",["407"],"// import { LogOut } from \"react-feather\";\r\nimport API from \".\";\r\nimport { API_URL } from \"../configs/constant\";\r\nimport { TOKEN_KEY, R_TOKEN } from \"../configs/constant\";\r\nimport EditStore from \"../views/stores/editStore\";\r\n\r\nconst AuthService = {\r\n  async getProfile() {\r\n    return await API.get(`${API_URL}/users/profile`);\r\n  },\r\n  async login(token) {\r\n    return await API.post(`${API_URL}/users/login`, token);\r\n  },\r\n  async register(data) {\r\n    return await API.post(`${API_URL}/users/register`, data);\r\n  },\r\n  async forgotPassword(data) {\r\n    return await API.post(`${API_URL}/api/auth/forgotPassword`, data);\r\n  },\r\n  async logOut() {\r\n    const rtoken = localStorage.getItem(R_TOKEN);\r\n    return await API.post(`${API_URL}/users/logout/${rtoken}`);\r\n  },\r\n  async resetPassword() {\r\n    const token = localStorage.getItem(TOKEN_KEY);\r\n    return await API.post(`${API_URL}/api/auth/resetPassword/${token}`);\r\n  },\r\n  async changePassword(data) {\r\n    return await API.put(`${API_URL}/users/changePassword`, data);\r\n  },\r\n};\r\n\r\nconst BrandService = {\r\n  // async getList(page = 1, search = null, orderBy = null, sort = null) {\r\n  //   const params = { page };\r\n  //   if (search) params.search = search;\r\n  //   if (sort !== null) params.sort = sort;\r\n  //   if (orderBy) params.orderBy = orderBy;\r\n  //   return await API.get(`${API_URL}/api/user`, { params });\r\n  // },\r\n\r\n  async getTranxList(page = 1, search = null, orderBy = null, sort = null) {\r\n    const params = { page };\r\n    if (search) params.search = search;\r\n    if (sort !== null) params.sort = sort;\r\n    if (orderBy) params.orderBy = orderBy;\r\n    return await API.get(`${API_URL}/api/transaction/user-transaction-list`, {\r\n      params,\r\n    });\r\n  },\r\n\r\n  // async getAskMoneyDetails(page = 1, search = null, orderBy = null, sort = null) {\r\n  //   const params = { page };\r\n  //   if (search) params.search = search;\r\n  //   if (sort !== null) params.sort = sort;\r\n  //   if (orderBy) params.orderBy = orderBy;\r\n  //   return await API.get(`${API_URL}/api/ask-money/ask-money-list`, {\r\n  //     params,\r\n  //   });\r\n  // },\r\n  async getByID(id) {\r\n    return await API.get(`${API_URL}/api/user/${id}`);\r\n  },\r\n\r\n  async edit(data) {\r\n    return await API.put(`/api/user`, data);\r\n  },\r\n\r\n  // async askMoney(id, data) {\r\n  //   console.log(\"askmoney id\", id);\r\n  //   console.log(\"Brandservice token :\", localStorage.getItem(TOKEN_KEY));\r\n  //   return await API.post(\r\n  //     `${API_URL}/api/ask-money/ask-money/${id}`,\r\n  //     { id },\r\n  //     data\r\n  //   );\r\n  // },\r\n\r\n  // async sentMoney(id, data) {\r\n  //   return await API.post(`${API_URL}/api/transaction/sent-money/${id}`, data);\r\n  // },\r\n\r\n};\r\n\r\nconst ComplaintService = {\r\n  async getComplaintList() {\r\n    return await API.get(`${API_URL}/complaints`);\r\n  },\r\n  async addComplaint(data) {\r\n    return await API.post(`${API_URL}/complaints`, data);\r\n  },\r\n  async deleteComplaint(_id) {\r\n    return await API.delete(`${API_URL}/complaints/${_id}`);\r\n  },\r\n};\r\n\r\nconst CategoryService = {\r\n  async getCategoryList(parent_id = null) {\r\n    const params = {};\r\n    if (parent_id) {\r\n      params.parent_id = parent_id;\r\n    }\r\n    return await API.get(`${API_URL}/categories`, { params });\r\n  },\r\n\r\n  async addCategory(parent_id = null, data) {\r\n    const params = {};\r\n    if (parent_id) {\r\n      params.parent_id = parent_id;\r\n    }\r\n    return await API.post(`${API_URL}/categories`, data, { params });\r\n  },\r\n\r\n  async deleteCategory(_id) {\r\n    return await API.delete(`${API_URL}/categories/${_id}`);\r\n  },\r\n\r\n  async editCategory(_id, data) {\r\n    return await API.put(`${API_URL}/categories/${_id}`, data);\r\n  },\r\n};\r\n\r\nconst StoreService = {\r\n  async addstore(data) {\r\n    return await API.post(`${API_URL}/stores`, data);\r\n  },\r\n  async getstoreLists() {\r\n    return await API.get(`${API_URL}/stores`);\r\n  },\r\n  async deleteStore(_id) {\r\n    return await API.delete(`${API_URL}/stores/${_id}`);\r\n  },\r\n  async EditStore(_id, data) {\r\n    return await API.put(`${API_URL}/stores/${_id}`, data);\r\n  },\r\n};\r\n\r\nconst ProductService = {\r\n  async getProductList() {\r\n    return await API.get(`${API_URL}/products`);\r\n  },\r\n  async deleteProducts(_id) {\r\n    return await API.delete(`${API_URL}/products/${_id}`);\r\n  },\r\n  async addProduct(data) {\r\n    return await API.post(`${API_URL}/products`, data);\r\n  },\r\n};\r\n\r\nconst SalesService = {\r\n  async getsalesList(page = 1 ,search = null, orderBy = null, sort = null){\r\n    const params = { page };\r\n    if (search) params.search = search;\r\n    if (sort !== null) params.sort = sort;\r\n    if (orderBy) params.orderBy = orderBy;\r\n    return await API.get(`${API_URL}/sells`, { params });\r\n  },\r\n\r\n  async deletSales(_id) {\r\n    return await API.delete(`${API_URL}/sells/${_id}`);\r\n  },\r\n  \r\n  async addSales(data) {\r\n    return await API.post(`${API_URL}/sells`, data);\r\n  },\r\n\r\n  async getInvoiceList(_id){\r\n    return await API.get(`${API_URL}/sells/invoice/${_id}`);\r\n  },\r\n}\r\n\r\nconst PurchaseService = {\r\n  async getPurchaseList(page = 1 ,search = null, orderBy = null, sort = null){\r\n    const params = { page };\r\n    if (search) params.search = search;\r\n    if (sort !== null) params.sort = sort;\r\n    if (orderBy) params.orderBy = orderBy;\r\n    return await API.get(`${API_URL}/purchases`, { params });\r\n  },\r\n\r\n  async addPurchase(data) {\r\n    return await API.post(`${API_URL}/purchases`, data)\r\n  },\r\n\r\n  async deletePurchase(_id) {\r\n    return await API.delete(`${API_URL}/purchases/${_id}`);\r\n  },\r\n}\r\n\r\nconst DashBoard = {\r\n  async getProductCount(){\r\n    return await API.get(`${API_URL}/dashboard/productsCount`);\r\n  },\r\n  async getSaleCount(){\r\n    return await API.get(`${API_URL}/dashboard/sellCount`);\r\n  },\r\n  async getComplaintCount(){\r\n    return await API.get(`${API_URL}/dashboard/complaintCount`);\r\n  },\r\n  async getPurchaseCount(){\r\n    return await API.get(`${API_URL}/dashboard/purchaseCount`);\r\n  },\r\n\r\n\r\n\r\n}\r\n\r\nexport { AuthService, BrandService, ComplaintService, CategoryService, StoreService, ProductService, SalesService, PurchaseService, DashBoard };\r\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/router/index.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/services/interceptor.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Home.js",["408","409","410"],"import React from \"react\";\r\nimport Wellcome from \"./wellcome\";\r\nimport SellCounts from \"./sellCount\";\r\nimport ProductCounts from \"./productCount\";\r\nimport StateCard from \"./ui-elements/cards/statistics/StatsCard\";\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <StateCard />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/authentication/ForgotPassword.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/authentication/Login.js",["411","412"],"import React, { useState, useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Row,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  UncontrolledAlert,\r\n  Spinner,\r\n} from \"reactstrap\";\r\nimport { Mail, Lock } from \"react-feather\";\r\n// import Checkbox from \"./../../components/checkbox/CheckboxesVuexy\";\r\n\r\nimport loginImg from \"./../../assets/img/login.png\";\r\nimport \"./../../assets/scss/pages/authentication.scss\";\r\nimport { TOKEN_KEY, R_TOKEN } from \"./../../configs/constant\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { AuthService } from \"./../../services/api.service\";\r\nimport { history } from \"../../history\";\r\n// import { data } from \"jquery\";\r\n// import { axios } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Login = (props) => {\r\n  const dispatch = useDispatch();\r\n  \r\n  const [errorText, setErrorText] = useState(null);\r\n  const [showLoader, setShowLoader] = useState(false);\r\n  const login = async (values) => {\r\n    setErrorText(null);\r\n    setShowLoader(true);\r\n    try {\r\n      const { token, userInfo } = await AuthService.login({\r\n        email: values.email,\r\n        password: values.password,\r\n      });\r\n      \r\n      localStorage.setItem(\"userId\", userInfo._id)\r\n      localStorage.setItem(TOKEN_KEY, token.token);\r\n      console.log(\"token\", token.token);\r\n      localStorage.setItem(R_TOKEN, token.refreshToken)\r\n      console.log(R_TOKEN, token.refreshToken)\r\n      dispatch({\r\n        type: \"SET_AUTH\",\r\n        payload: userInfo,\r\n      });\r\n      history.push(\"/\");\r\n      toast(`${userInfo.firstName} Login Successfully`);\r\n\r\n    } catch (error) {\r\n      // setErrorText(error.message);\r\n      toast.error(error.message)\r\n      console.log(\"error message\",error)\r\n    } finally {\r\n      setShowLoader(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row className=\"m-0 justify-content-center\">\r\n      <Col\r\n        sm=\"8\"\r\n        xl=\"7\"\r\n        lg=\"10\"\r\n        md=\"8\"\r\n        className=\"d-flex justify-content-center\"\r\n      >\r\n        <Card className=\"bg-authentication login-card rounded-0 mb-0 w-100\">\r\n          <Row className=\"m-0\">\r\n            <Col\r\n              lg=\"6\"\r\n              className=\"d-lg-block d-none text-center align-self-center px-1 py-0\"\r\n            >\r\n              <img src={loginImg} alt=\"loginImg\" />\r\n            </Col>\r\n            <Col lg=\"6\" md=\"12\" className=\"p-0\">\r\n              <Card className=\"rounded-0 mb-0 px-2\">\r\n                <CardBody className=\"mt-5 mb-5\">\r\n                  <h4>Login</h4>\r\n                  <p>Welcome back, please login to your account.</p>\r\n                  <Formik\r\n                    initialValues={{ email: \"\", password: \"\" }}\r\n                    onSubmit={async (values) => {\r\n                      login(values);\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                      email: Yup.string()\r\n                        .required(\"Enter email\")\r\n                        .email(\"Enter valid email\"),\r\n                      password: Yup.string().required(\"Enter Password\"),\r\n                    })}\r\n                  >\r\n                    {(props) => {\r\n                      const {\r\n                        values,\r\n                        errors,\r\n                        touched,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                      } = props;\r\n                      return (\r\n                        <>\r\n                          {errorText && (\r\n                            <UncontrolledAlert color=\"danger\">\r\n                              {errorText}\r\n                            </UncontrolledAlert>\r\n                          )}\r\n                          <Form onSubmit={handleSubmit}>\r\n                            <Label>Email *</Label>\r\n                            <FormGroup className=\"position-relative has-icon-left\">\r\n                              <Input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                placeholder=\"Email\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={`form-control ${\r\n                                  touched.email && errors.email\r\n                                    ? \"is-invalid\"\r\n                                    : \"\"\r\n                                }`}\r\n                              />\r\n                              {touched.email && errors.email && (\r\n                                <div className=\"invalid-feedback\">\r\n                                  {errors.email}\r\n                                </div>\r\n                              )}\r\n                              <div className=\"form-control-position\">\r\n                                <Mail size={15} />\r\n                              </div>\r\n                            </FormGroup>\r\n                            <Label>Password *</Label>\r\n                            <FormGroup className=\"has-icon-left position-relative\">\r\n                              <Input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                placeholder=\"Password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={`${\r\n                                  touched.password && errors.password\r\n                                    ? \"is-invalid\"\r\n                                    : \"\"\r\n                                }`}\r\n                              />\r\n                              <div className=\"form-control-position\">\r\n                                <Lock size={15} />\r\n                              </div>\r\n                              {touched.password && errors.password && (\r\n                                <div className=\"invalid-feedback\">\r\n                                  {errors.password}\r\n                                </div>\r\n                              )}\r\n                            </FormGroup>\r\n                            <FormGroup className=\"d-flex justify-content-between align-items-center\">\r\n                              {/* <Checkbox\r\n                                color=\"primary\"\r\n                                icon={<Check className=\"vx-icon\" size={16} />}\r\n                                label=\"Remember me\"\r\n                              /> */}\r\n                              <NavLink\r\n                                to=\"/forgot-password\"\r\n                                className=\"float-right text-primary\"\r\n                              >\r\n                                Forgot Password?\r\n                              </NavLink>\r\n                            </FormGroup>\r\n                            <div className=\"d-flex justify-content-center\">\r\n                              <Button\r\n                                className=\"block\"\r\n                                color=\"primary\"\r\n                                type=\"submit\"\r\n                                disabled={showLoader}\r\n                              >\r\n                                {showLoader ? (\r\n                                  <>\r\n                                    <Spinner\r\n                                      color=\"white\"\r\n                                      size=\"sm\"\r\n                                      type=\"grow\"\r\n                                    />\r\n                                    <span className=\"ml-50\">Loading...</span>\r\n                                  </>\r\n                                ) : (\r\n                                  \"Login\"\r\n                                )}\r\n                              </Button>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"d-flex justify-content-center\">\r\n                              <Button\r\n                                className=\"block\"\r\n                                color=\"primary\"\r\n                                onClick={() =>\r\n                                  history.push(\"/authentication/reg\")\r\n                                }\r\n                                // disabled={showLoader}\r\n                              >\r\n                                Register\r\n                              </Button>\r\n                            </div>\r\n                          </Form>\r\n                        </>\r\n                      );\r\n                    }}\r\n                  </Formik>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\nexport default Login;\r\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/authentication/register.js",["413","414","415","416","417","418","419","420","421","422"],"import React, { useState, useRef } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n  UncontrolledAlert,\n  Spinner,\n} from \"reactstrap\";\nimport { Mail, Lock, Check, Phone, User, Calendar } from \"react-feather\";\nimport Checkbox from \"./../../components/checkbox/CheckboxesVuexy\";\nimport loginImg from \"./../../assets/img/login.png\";\nimport \"./../../assets/scss/pages/authentication.scss\";\nimport { TOKEN_KEY } from \"./../../configs/constant\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { history } from \"../../history\";\nimport { AuthService } from \"./../../services/api.service\";\nimport moment from \"moment\";\nimport { toast } from 'react-toastify';\n\nexport const Register = (props) => {\n  const dispatch = useDispatch();\n  const [errorText, setErrorText] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const [initvalues, setInitValues] = useState({\n    email: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  const register = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values };\n      const response = await AuthService.register(value);\n      console.log(response);\n      history.push(\"/login\");\n      toast(`${value.firstName} Registered Successfully Successfully`);\n    } catch (error) {\n      // setErrorText(error.message);\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n\n  return (\n    <Row className=\"m-0 justify-content-center\">\n      <Col\n        sm=\"8\"\n        xl=\"7\"\n        lg=\"10\"\n        md=\"8\"\n        className=\"d-flex justify-content-center\"\n      >\n        <Card className=\"bg-authentication login-card rounded-0 mb-0 w-100\">\n          <Row className=\"m-0\">\n            <Col\n              lg=\"6\"\n              className=\"d-lg-block d-none text-center align-self-center px-1 py-0\"\n            >\n              <img src={loginImg} alt=\"loginImg\" />\n            </Col>\n            <Col lg=\"6\" md=\"12\" className=\"p-0\">\n              <Card className=\"rounded-0 mb-0 px-2\">\n                <CardBody className=\"mt-5 mb-5\">\n                  <h4>Register</h4>\n                  <p>*Welcome Register Here*</p>\n                  <Formik\n                    initialValues={initvalues}\n                    onSubmit={async (values) => {\n                      register(values);\n                    }}\n                    validationSchema={Yup.object().shape({\n                      email: Yup.string().required().email(),\n                      password: Yup.string().required(),\n                      firstName: Yup.string().required(),\n                      lastName: Yup.string().required(),\n                    })}\n                  >\n                    {(props) => {\n                      const {\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                      } = props;\n                      return (\n                        <>\n                          {errorText && (\n                            <UncontrolledAlert color=\"danger\">\n                              {errorText}\n                            </UncontrolledAlert>\n                          )}\n                          <Form onSubmit={handleSubmit}>\n                          <Label>Email *</Label>\n                            <FormGroup className=\"position-relative has-icon-left\">\n                              <Input\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                value={values.email}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                className={`form-control ${\n                                  touched.email && errors.email\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                              />\n                              {touched.email && errors.email && (\n                                <div className=\"invalid-feedback\">\n                                  {errors.email}\n                                </div>\n                              )}\n                              <div className=\"form-control-position\">\n                                <Mail size={15} />\n                              </div>\n                            </FormGroup>\n                            <Label>Password *</Label>\n                            <FormGroup className=\"position-relative has-icon-left\">\n                              <Input\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder=\"Enter Your Password\"\n                                value={values.password}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                className={`form-control ${\n                                  touched.password && errors.password\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                              />\n                              {touched.password && errors.password && (\n                                <div className=\"invalid-feedback\">\n                                  {errors.password}\n                                </div>\n                              )}\n                              <div className=\"form-control-position\">\n                                <Lock size={15} />\n                              </div>\n                            </FormGroup>\n                            <Label>First Name *</Label>\n                            <FormGroup className=\"position-relative has-icon-left\">\n                              <Input\n                                type=\"text\"\n                                name=\"firstName\"\n                                placeholder=\"First Name\"\n                                value={values.firstName}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                className={`form-control ${\n                                  touched.firstName && errors.firstName\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                              />\n                              <div className=\"form-control-position\">\n                                <User size={15} />\n                              </div>\n                              {touched.firstName && errors.firstName && (\n                                <div className=\"invalid-feedback\">\n                                  {errors.firstName}\n                                </div>\n                              )}\n                            </FormGroup>\n                            <Label>Last Name *</Label>\n                            <FormGroup className=\"position-relative has-icon-left\">\n                              <Input\n                                type=\"text\"\n                                name=\"lastName\"\n                                placeholder=\"Last Name\"\n                                value={values.lastName}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                className={`form-control ${\n                                  touched.lastName && errors.lastName\n                                    ? \"is-invalid\"\n                                    : \"\"\n                                }`}\n                              />\n                              <div className=\"form-control-position\">\n                                <User size={15} />\n                              </div>\n                              {touched.lastName && errors.lastName && (\n                                <div className=\"invalid-feedback\">\n                                  {errors.lastName}\n                                </div>\n                              )}\n                            </FormGroup>\n                            <div className=\"container\">\n                              <Button\n                                className=\"block\"\n                                color=\"primary\"\n                                type=\"submit\"\n                                disabled={showLoader}\n                              >\n                                {showLoader ? (\n                                  <>\n                                    <Spinner\n                                      color=\"white\"\n                                      size=\"sm\"\n                                      type=\"grow\"\n                                    />\n                                    <span className=\"ml-50\">Loading...</span>\n                                  </>\n                                ) : (\n                                  \"Register\"\n                                )}\n                              </Button>\n                              <br />\n                              <Button\n                                className=\"block\"\n                                color=\"primary\"\n                                type=\"submit\"\n                                onClick={() => history.goBack()}\n                              >\n                                Back to Login\n                              </Button>\n                            </div>\n                          </Form>\n                        </>\n                      );\n                    }}\n                  </Formik>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\nexport default Register;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/customizer/Customizer.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/store/actions/customizer.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/navbar/Navbar.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/footer/Footer.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/vertical-menu/Sidebar.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/horizontal-menu/HorizontalMenu.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/store/reducers/index.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/services/index.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/components/checkbox/CheckboxesVuexy.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/navbar/NavbarUser.js",["423","424","425","426","427","428","429","430"],"import React from \"react\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,NavItem, NavLink\r\n} from \"reactstrap\";\r\nimport * as Icon from \"react-feather\";\r\nimport defaultImage from \"../../../assets/img/profile.jpg\";\r\nimport { history } from \"../../../history\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AuthService } from \"../../../services/api.service\";\r\nimport { TOKEN_KEY } from \"../../../configs/constant\";\r\nimport { Sun, Moon } from 'react-feather'\r\n\r\nconst UserDropdown = (props) => {\r\n  // const { skin, setSkin } = props;\r\n  const userId = localStorage.getItem(\"id\");\r\n  const token = localStorage.getItem(TOKEN_KEY);\r\n  const dispatch = useDispatch();\r\n\r\n  const onLogout = async () => {\r\n    try {\r\n      AuthService.logOut();\r\n      dispatch({ type: \"PURGE_AUTH\" });\r\n    } catch (ex) {\r\n      console.log(ex);\r\n    }\r\n  };\r\n\r\n  const onChangePassword = async () => {\r\n    await AuthService.resetPassword();\r\n    history.push(\"/authentication/changepassword/\");\r\n  };\r\n\r\n  // const ThemeToggler = (props) => {\r\n  //   if (skin === \"dark\") {\r\n  //     return <Sun className=\"ficon\" onClick={() => setSkin(\"light\")} />;\r\n  //   } else {\r\n  //     return <Moon className=\"ficon\" onClick={() => setSkin(\"dark\")} />;\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n      <DropdownMenu>\r\n        \r\n        <Link to=\"/profile\">\r\n          <DropdownItem tag=\"a\">\r\n            <Icon.User size={14} className=\"mr-50\" />\r\n            <span className=\"align-middle\">Admin Details</span>\r\n          </DropdownItem>\r\n        </Link>\r\n        <Link to=\"/profile/edit\">\r\n          <DropdownItem tag=\"a\">\r\n            <Icon.Edit size={14} className=\"mr-50\" />\r\n            <span className=\"align-middle\">Edit Profile</span>\r\n          </DropdownItem>\r\n        </Link>\r\n        <Link to=\"/ChangePassword\">\r\n          <DropdownItem tag=\"a\">\r\n            <Icon.Lock size={14} className=\"mr-50\" />\r\n            <span className=\"align-middle\">Change Password</span>\r\n          </DropdownItem>\r\n        </Link>\r\n        <DropdownItem divider />\r\n        <DropdownItem tag=\"a\" onClick={onLogout}>\r\n          <Icon.Power size={14} className=\"mr-50\" />\r\n          <span className=\"align-middle\">Log Out</span>\r\n        </DropdownItem>\r\n      </DropdownMenu>\r\n    \r\n  );\r\n};\r\n\r\nclass NavbarUser extends React.PureComponent {\r\n  state = {\r\n    navbarSearch: false,\r\n    suggestions: [],\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  handleNavbarSearch = () => {\r\n    this.setState({\r\n      navbarSearch: !this.state.navbarSearch,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const userId = localStorage.getItem(\"id\");\r\n    return (\r\n      <>\r\n        <ul className=\"nav navbar-nav navbar-nav-user float-right\">\r\n        \r\n        </ul>\r\n        <ul className=\"nav navbar-nav navbar-nav-user float-right\">\r\n          <UncontrolledDropdown tag=\"li\" className=\"dropdown-user nav-item\">\r\n            <DropdownToggle tag=\"a\" className=\"nav-link dropdown-user-link\">\r\n              <div className=\"user-nav d-sm-flex d-none\">\r\n                <span className=\"user-name text-bold-600\">\r\n                  {`${this.props.currentUser?.firstName} ${this.props.currentUser?.lastName}`}\r\n                </span>\r\n                <span className=\"user-status\">\r\n                  {this.props.currentUser?.email}\r\n                </span>\r\n              </div>\r\n              <span data-tour=\"user\">\r\n                <img\r\n                  src={this.props.currentUser?.image || defaultImage}\r\n                  className=\"round\"\r\n                  height=\"40\"\r\n                  width=\"40\"\r\n                  alt=\"avatar\"\r\n                />\r\n              </span>\r\n            </DropdownToggle>\r\n            \r\n            <UserDropdown {...this.props} />\r\n            \r\n          </UncontrolledDropdown>\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    currentUser: state.auth.currentUser,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NavbarUser);\r\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/vertical-menu/SidebarHeader.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/components/radio/RadioVuexy.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/horizontalMenuConfig.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/vertical-menu/sidemenu/SideMenuContent.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/store/reducers/auth.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/store/reducers/navbar.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/store/reducers/customizer.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/navigationConfig.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/layouts/components/menu/vertical-menu/sidemenu/SideMenuGroup.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/components/TableLoadingText.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/components/Pagination.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/user/adminProfile.js",["431","432","433","434"],"import { useEffect, useState } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport Loader from \"../../components/Loader\";\nimport { AuthService } from \"../../services/api.service\";\nimport { history } from \"../../history\";\nimport { useSelector } from \"react-redux\";\n\nconst AdminProfile = (props) => {\n\n  const { history, match } = props;\n  const [showLoader, setShowLoader] = useState(false);\n  const [userData, setUserData] = useState([]);\n\n  useEffect(() => {\n    loadAdminProfile();\n  }, []);\n\n  const loadAdminProfile = async () => {\n    setShowLoader(true);\n    try {\n      const data = await AuthService.getProfile();\n      console.log(\"Data\", data);\n      setUserData(data);\n      console.log(\"userdata\", userData);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle>User Details </CardTitle>\n        </CardHeader>\n        <hr />\n        <CardBody>\n          <Form>\n          <FormGroup row>\n              <Col md=\"3\" className=\"text-center\">\n                <span>_id *</span>\n              </Col>\n              <Col md=\"5\">\n                <Input value={userData._id} />\n              </Col>\n            </FormGroup>\n            <FormGroup row>\n              <Col md=\"3\" className=\"text-center\">\n                <span>First Name *</span>\n              </Col>\n              <Col md=\"5\">\n                <Input value={userData.firstName} />\n              </Col>\n            </FormGroup>\n            <FormGroup row>\n              <Col md=\"3\" className=\"text-center\">\n                <span>Last Name *</span>\n              </Col>\n              <Col md=\"5\">\n                <Input\n                //   placeholder=\"Last Name\"\n                    value={userData.lastName}\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup row>\n              <Col md=\"3\" className=\"text-center\">\n                <span>E-Mail *</span>\n              </Col>\n              <Col md=\"5\">\n                <Input\n                //   placeholder=\"email\"\n                    value={userData.email}\n                />\n              </Col>\n            </FormGroup>\n            <Row>\n              <Col md=\"3\"></Col>\n              <Col md=\"5\">\n                <Button\n                  color=\"primary\"\n                  outline\n                  onClick={() => history.goBack()}\n                >\n                  Cancel\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\nexport default AdminProfile;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/user/editAdminProfile.js",["435","436","437","438","439","440"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n  CustomInput,\n} from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../components/Loader\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { API_URL, TOKEN_KEY } from \"../../configs/constant\";\nimport { toast } from 'react-toastify';\n\nconst EditProfile = (props) => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const fileUploader = useRef(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const currentUser = useSelector((state) => state.auth.currentUser);\n  currentUser.dob = moment(new Date(currentUser.dob)).format(\"YYYY-MM-DD\");\n  const [formValues, setFormValues] = useState({\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    phoneNumber: currentUser.phoneNumber,\n    dob: currentUser.dob,\n    gender: currentUser.gender,\n    image: currentUser.image,\n  });\n\n  const { id: editId } = match.params;\n  console.log(\"match\", editId);\n  // console.log(formValues.image)\n\n  useEffect(() => {\n    \n  }, []);\n\n  const onSubmit = async (values) => {\n    const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n    // console.log(\"Submit Calling\");\n    console.log(\"values\", values);\n    try {\n      const value = { ...values};\n      console.log(\"values:\", value);\n      // console.log(\"values after change:\", value);\n      await axios.put(`${API_URL}/users/updateProfile`, value, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      history.push(\"/\");\n      toast.success(\"Profile Updated\")\n    } catch (ex) {\n      console.log(ex);\n      toast.error(ex)\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Edit Your Details</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            firstName: Yup.string().required(),\n            lastName: Yup.string().required(),\n            email: Yup.string().required().email(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            // console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>First Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"firstName\"\n                        value={values.firstName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.firstName && errors.firstName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.firstName && errors.firstName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.firstName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Last Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"lastName\"\n                        value={values.lastName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.lastName && errors.lastName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.lastName && errors.lastName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.lastName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>E-Mail</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"email\"\n                        placeholder=\"email\"\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.email && errors.email ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.email && errors.email && (\n                        <div className=\"invalid-feedback\">{errors.email}</div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Update\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditProfile;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/authentication/changePassword.js",["441","442","443","444","445","446","447","448","449","450","451"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../components/Loader\";\nimport { history } from \"../../history\";\nimport { AuthService } from \"../../services/api.service\";\nimport { useSelector } from \"react-redux\";\nimport { TOKEN_KEY, API_URL } from \"../../configs/constant\";\nimport { axios } from \"axios\";\nimport { toast } from 'react-toastify';\n\nconst ChangePassword = (props) => {\n  const [formValues, setFormValues] = useState({\n    oldPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n\n  const [showLoader, setShowLoader] = useState(false);\n  const { history, match } = props;\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n\n  const onSubmit = async (data) => {\n    setShowSubmitLoader(true);\n    try {\n      await AuthService.changePassword(data);\n      history.push(\"/\");\n      toast.success(\"Password Changed\")\n    } catch (ex) {\n      console.log(ex);\n      toast.error(ex)\n    } finally {\n      setShowSubmitLoader(false);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Change Password</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            oldPassword: Yup.string().required(),\n            newPassword:Yup.string().required(),\n            confirmPassword: Yup.string().oneOf([Yup.ref('newPassword'), null],'Password Doesnt Match').required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Old Password *</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"password\"\n                        name=\"oldPassword\"\n                        placeholder=\"Enter your New Password\"\n                        value={values.oldPassword}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.oldPassword && errors.oldPassword\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.oldPassword && errors.oldPassword && (\n                        <div className=\"invalid-feedback\">\n                          {errors.oldPassword}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>New Password *</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"password\"\n                        name=\"newPassword\"\n                        placeholder=\"Enter your New Password\"\n                        value={values.newPassword}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.newPassword && errors.newPassword\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.newPassword && errors.newPassword && (\n                        <div className=\"invalid-feedback\">\n                          {errors.newPassword}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Confirm Password *</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"password\"\n                        name=\"confirmPassword\"\n                        placeholder=\"Confirm Password\"\n                        value={values.confirmPassword}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.confirmPassword && errors.confirmPassword\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.confirmPassword && errors.confirmPassword && (\n                        <div className=\"invalid-feedback\">\n                          {errors.confirmPassword}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (                               \n                          \"Change\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ChangePassword;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/wellcome.js",["452","453"],"import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst Wellcome = () => {\n  const currentUser = useSelector((state) => state.auth.currentUser);\n  console.log(\"cu\",currentUser)\n  const [showLoader, setShowLoader] = useState(false);\n  return (\n    <>\n      <div className=\"container\">\n        <h2>\n          Wellcome <b> {currentUser?.firstName} {currentUser?.lastName}</b>!\n        </h2>\n      </div>\n    </>\n  );\n};\n\nexport default Wellcome;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/SubCategory/categoryPhones.js",["454","455","456","457"],"import React, { useState, useEffect } from \"react\";\nimport { Card, CardBody, Col, Row, Button } from \"reactstrap\";\nimport { history } from \"../../../history\";\nimport { Link } from \"react-router-dom\";\nimport * as Icon from \"react-feather\";\n\nconst CategoryPhones = () => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [userData, setUserData] = useState([]);\n\n  //   useEffect(() => {\n  //     loadWalletBalance();\n  //   }, []);\n\n  //   const loadWalletBalance = async () => {\n  //     setShowLoader(true);\n  //     try {\n  //       const { data } = await BrandService.getBalance();\n  //       console.log(\"Card Data\", data);\n  //       setUserData(data.totalBalance);\n  //       console.log(\"data\", userData);\n  //     } catch (ex) {\n  //       console.log(ex);\n  //     } finally {\n  //       setShowLoader(false);\n  //     }\n  //   };\n\n  return (\n    <>\n      <div id=\"dashboard-analytics\">\n        <Row className=\"match-height\">\n          <Col lg=\"2\" sm=\"6\">\n            <Card>\n              <CardBody className=\"pb-0\">\n                <Link to=\"/AddPhone\">\n                  <b>Apple</b>\n                  <h2 className=\"font-weight-bolder mt-1\">{userData} </h2>\n                  <p className=\"card-text\"></p>\n                </Link>\n              </CardBody>\n              <div className=\"container\">\n              <Link to=\"/EditPhone\"><Icon.Edit size={18} /></Link>\n              </div>\n            </Card>\n          </Col>\n          <Col lg=\"2\" sm=\"6\">\n            <Card>\n              <Link>\n                <CardBody className=\"pb-0\">\n                  <b>SamSung</b>\n                  <h2 className=\"font-weight-bolder mt-1\">{userData} </h2>\n                  <p className=\"card-text\"></p>\n                </CardBody>\n              </Link>\n            </Card>\n          </Col>\n          <Col lg=\"2\" sm=\"6\">\n            <Card>\n              <Link>\n                <CardBody className=\"pb-4\">\n                  <b>Mi</b>\n                  <h2 className=\"font-weight-bolder mt-1\">{userData} </h2>\n                  <p className=\"card-text\"></p>\n                </CardBody>\n              </Link>\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg=\"2\" sm=\"6\">\n            <Card>\n              <Link>\n                <CardBody className=\"pb-4\">\n                  <b>Oppo</b>\n                  <h2 className=\"font-weight-bolder mt-1\">{userData} </h2>\n                  <p className=\"card-text\"></p>\n                </CardBody>\n              </Link>\n            </Card>\n          </Col>\n          <Col lg=\"2\" sm=\"6\">\n            <Card>\n              <Link>\n                <CardBody className=\"pb-4\">\n                  <b>Vivo</b>\n                  <h2 className=\"font-weight-bolder mt-1\">{userData} </h2>\n                  <p className=\"card-text\"></p>\n                </CardBody>\n              </Link>\n            </Card>\n          </Col>\n          <Col lg=\"2\" sm=\"6\">\n            <Card>\n              <Link>\n                <CardBody className=\"pb-4\">\n                  <b>Asus</b>\n                  <h2 className=\"font-weight-bolder mt-1\">{userData} </h2>\n                  <p className=\"card-text\"></p>\n                </CardBody>\n              </Link>\n            </Card>\n          </Col>\n        </Row>\n        <hr />\n        <Row>\n          <Col md=\"1\"></Col>\n          <Col md=\"5\">\n            <Button\n              className=\"mr-3\"\n              color=\"primary\"\n              onClick={() => history.push(\"/AddPhoneBrand\")}\n            >\n              Add Brand\n            </Button>\n            {/* <Button\n              className=\"mr-3\"\n              color=\"primary\"\n              onClick={() => history.push(\"/AddPhoneBrand\")}\n             >\n               Edit Brand\n            </Button> */}\n            <Button color=\"secondary\" outline onClick={() => history.goBack()}>\n              Cancel\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n};\n\nexport default CategoryPhones;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/SubCategory/categoryCovers.js",["458","459","460","461","462","463"],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Complaint/complaintList.js",["464","465","466","467","468","469","470","471"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { ChevronDown, ChevronUp, Trash, Edit, Eye } from \"react-feather\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Table,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n} from \"reactstrap\";\n\nimport Loader from \"../../components/Loader\";\n// import Paginations from \"../../components/Pagination\";\nimport {\n  IsActiveLabel,\n  NoRecordsFound,\n  TableLoadingText,\n} from \"../../components/TableLoadingText\";\nimport { history } from \"../../history\";\nimport { ComplaintService } from \"../../services/api.service\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst ComplaintList = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const searchInputRef = useRef(null);\n  const [deleteID, setDeleteID] = useState(null);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(1);\n  const [dataList, setDataList] = useState([]);\n  const [orderBy, setOrderBy] = useState(null);\n  const [sort, setSort] = useState(null);\n\n  useEffect(() => {\n    getComplaintLists();\n  }, []);\n\n  const getComplaintLists = async () => {\n    setShowLoader(true);\n    try {\n      const data = await ComplaintService.getComplaintList(\n        currentPage,\n        searchInputRef.current.value,\n        orderBy,\n        sort\n      );\n      console.log(\"conplaint data\", data);\n      setDataList(data);\n      console.log(\"DataList\", dataList);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onDeleteRecord = async (_id) => {\n    await ComplaintService.deleteComplaint(_id).then(() => {\n      getComplaintLists();\n    });\n\n    dataList.splice(deleteID, 1);\n    setDataList([...dataList]);\n    toast.error(\"Record Deleted Successfully\");\n    setShowDeleteAlert(false);\n    setDeleteID(null);\n  };\n\n  const _handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      getComplaintLists();\n    }\n  };\n\n  const changeOrderBy = (value) => {\n    let sorting = orderBy === value && sort === -1 ? 1 : -1;\n    setSort(sorting);\n    setOrderBy(value);\n  };\n\n  console.log(\"data\", dataList);\n\n  let complntList;\n  if (dataList.length > 0) {\n    complntList = dataList.map((element, index) => {\n      console.log(\"id\", element._id);\n      return (\n        <tr key={element._id}>\n          <td>{element._id}</td>\n          <td>{element.customerName}</td>\n          <td>{element.complaintDate}</td>\n          <td>{element.customerMobile}</td>\n          <td>{element.issueDetail}</td>\n          <td\n            style={\n              element.complaintStatus === \"true\"\n                ? { color: \"green\" }\n                : { color: \"red\" }\n            }\n            >\n            {element.complaintStatus === \"true\" ? \"Solved\" : \"Pending\"}\n          </td>\n          <td>\n            <Trash\n              size={18}\n              color={\"red\"}\n              className=\"cursor-pointer\"\n              onClick={() => {\n                onDeleteRecord(element._id);\n                setDeleteID(index);\n                setShowDeleteAlert(true);\n              }}\n            />\n            <Edit\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/EditComplaint/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n            <Eye\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/ViewComplaint/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n          </td>\n        </tr>\n      );\n    });\n  } else {\n    complntList = <NoRecordsFound colSpan={8} />;\n  }\n\n  return (\n    <Card>\n      {showLoader && <Loader />}\n      <CardHeader>\n        <CardTitle>\n          Customer Complaints <h6>*Total Complaints*</h6>\n        </CardTitle>\n\n        <div className=\"float-right\">\n          <Button\n            className=\"mr-1\"\n            outline\n            color=\"primary\"\n            onClick={() => history.push(\"/AddCompliant\")}\n          >\n            Add Complaint\n          </Button>\n        </div>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <div className=\"container\">\n          <InputGroup>\n            <Input\n              type=\"text\"\n              placeholder=\"Search...\"\n              innerRef={searchInputRef}\n              onKeyDown={_handleKeyDown}\n            />\n            <InputGroupAddon\n              addonType=\"append\"\n              className=\"cursor-pointer\"\n              onClick={getComplaintLists}\n            >\n              Search\n            </InputGroupAddon>\n          </InputGroup>\n        </div>\n        <Table responsive className=\"mt-2\">\n          <thead>\n            <tr className=\"table-active\">\n              <th> CustomerId </th>\n              <th\n                className=\"cursor-pointer\"\n                onClick={() => changeOrderBy(\"fromUser\")}\n              >\n                Customer Name\n                {orderBy === \"fromUser\" &&\n                  (sort === 1 ? (\n                    <ChevronUp size={14} />\n                  ) : (\n                    <ChevronDown size={14} />\n                  ))}\n              </th>\n              <th>Date</th>\n              <th>MNo</th>\n              <th>Issue</th>\n              <th>Status</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {showLoader ? <TableLoadingText colSpan={8} /> : complntList}\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ComplaintList;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Complaint/addComplaint.js",["472","473","474","475","476","477","478","479"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n  CustomInput,\n} from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../components/Loader\";\n\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { ComplaintService } from \"../../services/api.service\";\n\nconst AddPhone = (props) => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const fileUploader = useRef(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const [formValues, setFormValues] = useState({\n    customerName: \"\",\n    customerMobile: \"\",\n    issueDetail: \"\",\n    complaintDate: \"\",\n    complaintStatus: [{ name: \"true\" }, { name: \"false\" }],\n  });\n\n  const onSubmit = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values };\n      const response = await ComplaintService.addComplaint(value);\n      console.log(response);\n      history.push(\"/Complaints\");\n      toast.success(`${value.customerName} Added Successfully Successfully`);\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Add Complaint</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            customerName: Yup.string().required(),\n            customerMobile: Yup.string().required(),\n            issueDetail: Yup.string().required(),\n            complaintDate: Yup.date().required(),\n            complaintStatus: Yup.string().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            // console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"customerName\"\n                        placeholder=\"Enter Customer Name\"\n                        value={values.customerName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.customerName && errors.customerName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.customerName && errors.customerName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.customerName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Mobile Number</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"customerMobile\"\n                        placeholder=\"Enter Customer Phone Number\"\n                        value={values.customerMobile}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.customerMobile && errors.customerMobile\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.customerMobile && errors.customerMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.customerMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Issue Details</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"issueDetail\"\n                        placeholder=\"Enter Issue\"\n                        value={values.issueDetail}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.issueDetail && errors.issueDetail\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.issueDetail && errors.issueDetail && (\n                        <div className=\"invalid-feedback\">\n                          {errors.issueDetail}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Complaint Date</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"date\"\n                        name=\"complaintDate\"\n                        placeholder=\"\"\n                        value={values.complaintDate}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.complaintDate && errors.complaintDate\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.complaintDate && errors.complaintDate && (\n                        <div className=\"invalid-feedback\">\n                          {errors.complaintDate}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Complaint Status</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"select\"\n                        name=\"complaintStatus\"\n                        value={values.complaintStatus}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.complaintStatus && errors.complaintStatus\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      >\n                        <option value=\"\">Complaint Status</option>\n                        {formValues.complaintStatus.map((option, index) => (\n                          <option key={index} value={option.name}>\n                            {option.name === \"true\" ? \"Solved\" : \"Pending\"}\n                          </option>\n                        ))}\n\n                        {touched.complaintStatus && errors.complaintStatus && (\n                          <div className=\"invalid-feedback\">\n                            {errors.complaintStatus}\n                          </div>\n                        )}\n                      </Input>\n                    </Col>\n                  </FormGroup>\n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Submit\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default AddPhone;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/SubCategory/Phones/addPhone.js",["480","481","482","483","484","485","486","487","488","489","490","491","492","493"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n  CustomInput,\n} from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../../../components/Loader\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { API_URL, TOKEN_KEY } from \"../../../../configs/constant\";\nimport { toast } from \"react-toastify\";\nimport { AuthService } from \"../../../../services/api.service\";\n\nconst AddPhone = (props) => {\n  const [image, setImage] = useState(\"\");\n  const [removedImage, setRemovedImage] = useState(false);\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const fileUploader = useRef(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const [formValues, setFormValues] = useState({\n    modelName: \"\",\n    brandName: [{name:\"Apple\"},{name:\"mi\"},{name:\"oppo\"}],\n    description: \"\",\n    price: \"\",\n    discountPrice: \"\",\n    stock: \"\",\n  });\n\n  const { id: editId } = match.params;\n  console.log(\"match\", editId);\n  // console.log(formValues.image)\n\n  //   useEffect(() => {\n  //     setImage(currentUser?.image);\n  //   }, []);\n\n  const onSubmit = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values };\n      const response = await AuthService.register(value);\n      console.log(response);\n      history.push(\"/\");\n      //   toast(`${value.firstName} Registered Successfully Successfully`);\n    } catch (error) {\n      // setErrorText(error.message);\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onFileChange = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const regEx = /(.*?)\\.(jpg|jpeg|png)$/;\n    for (let file of event.target.files) {\n      const fileSize = file.size / (1024 * 1024);\n      if (!String(file[\"name\"]).toLowerCase().match(regEx)) continue;\n      if (fileSize > 3) continue;\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        setImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onRemoveFile = () => {\n    setImage(null);\n    setRemovedImage(true);\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Add Phone</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            modelName: Yup.string().required(),\n            brandName: Yup.string().required(),\n            Description: Yup.string().required(),\n            price: Yup.string().required(),\n            discountPrice: Yup.string().required(),\n            stock: Yup.string().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            // console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>ModelName</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"modelName\"\n                        value={values.modelName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.modelName && errors.modelName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.modelName && errors.modelName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.modelName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Brand Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"select\"\n                        name=\"brandName\"\n                        value={values.brandName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.brandName && errors.brandName ? \"is-invalid\" : \"\"\n                        }`}\n                      >\n                        <option value=\"\">BrandName</option>\n                        {formValues.brandName.map((option, index) => (\n                          <option key={index} value={option.name}>\n                            {option.name}\n                          </option>\n                        ))}\n\n                        {touched.brandName && errors.brandName && (\n                          <div className=\"invalid-feedback\">\n                            {errors.brandName}\n                          </div>\n                        )}\n                      </Input>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Description</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"description\"\n                        placeholder=\"description\"\n                        value={values.description}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.description && errors.description ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.description && errors.description && (\n                        <div className=\"invalid-feedback\">{errors.description}</div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"price\"\n                        placeholder=\"Price\"\n                        value={values.price}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.price && errors.price ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.price && errors.price && (\n                        <div className=\"invalid-feedback\">{errors.price}</div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Discount price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"discountPrice\"\n                        placeholder=\"Discount Price\"\n                        value={values.discountPrice}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.discountPrice && errors.discountPrice ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.discountPrice && errors.discountPrice && (\n                        <div className=\"invalid-feedback\">{errors.discountPrice}</div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Stock</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"stock\"\n                        placeholder=\"Stock\"\n                        value={values.stock}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.stock && errors.stock ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.stock && errors.stock && (\n                        <div className=\"invalid-feedback\">{errors.stock}</div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Update\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default AddPhone;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/SubCategory/Phones/editPhone.js",["494","495","496","497","498","499","500","501","502","503"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n  CustomInput,\n} from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../../../components/Loader\";\nimport { useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { API_URL, TOKEN_KEY } from \"../../../../configs/constant\";\nimport { toast } from 'react-toastify';\n\nconst EditPhone = (props) => {\n  const [image, setImage] = useState(\"\");\n  const [removedImage, setRemovedImage] = useState(false);\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const fileUploader = useRef(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const currentUser = useSelector((state) => state.auth.currentUser);\n  currentUser.dob = moment(new Date(currentUser.dob)).format(\"YYYY-MM-DD\");\n  const [formValues, setFormValues] = useState({\n    modelName: \"\",\n    brandName: [{name:\"Apple\"},{name:\"mi\"},{name:\"oppo\"}],\n    description: \"\",\n    price: \"\",\n    discountPrice: \"\",\n    stock: \"\",\n  });\n\n  const { id: editId } = match.params;\n  console.log(\"match\", editId);\n  // console.log(formValues.image)\n\n  useEffect(() => {\n    setImage(currentUser?.image);\n  }, []);\n\n  const onSubmit = async (values) => {\n    const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n    // console.log(\"Submit Calling\");\n    console.log(\"values\", values);\n    \n    try {\n      const value = { ...values, image };\n      console.log(\"values:\", value);\n      // console.log(\"values after change:\", value);\n      await axios.put(`${API_URL}/api/user/update-self-profile`, value, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      history.push(\"/\");\n      toast.success(\"Profile Updated\")\n    } catch (ex) {\n      console.log(ex);\n      toast.error(ex)\n    }\n  };\n\n  const onFileChange = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const regEx = /(.*?)\\.(jpg|jpeg|png)$/;\n    for (let file of event.target.files) {\n      const fileSize = file.size / (1024 * 1024);\n      if (!String(file[\"name\"]).toLowerCase().match(regEx)) continue;\n      if (fileSize > 3) continue;\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        setImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onRemoveFile = () => {\n    setImage(null);\n    setRemovedImage(true);\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Edit Phones</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            modelName: Yup.string().required(),\n            brandName: Yup.string().required(),\n            Description: Yup.string().required(),\n            price: Yup.string().required(),\n            discountPrice: Yup.string().required(),\n            stock: Yup.string().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            // console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Model Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"modelName\"\n                        value={values.modelName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.modelName && errors.modelName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.modelName && errors.modelName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.modelName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Brand Name</span>\n                    </Col>\n                    <Col md=\"2\">\n                      <Input\n                        type=\"select\"\n                        name=\"brandName\"\n                        placeholder=\"brandName\"\n                        value={values.brandName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.brandName && errors.brandName ? \"is-invalid\" : \"\"\n                        }`}\n                      >\n                        <option>Apple</option>\n                        <option>Mi</option>\n                        <option>Vivo</option>\n                        <option>Oppo</option>\n                        {touched.brandName && errors.brandName && (\n                          <div className=\"invalid-feedback\">\n                            {errors.brandName}\n                          </div>\n                        )}\n                      </Input>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>description</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"description\"\n                        value={values.description}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.description && errors.description\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.description && errors.description && (\n                        <div className=\"invalid-feedback\">\n                          {errors.description}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"price\"\n                        placeholder=\"price\"\n                        value={values.price}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.price && errors.price ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.price && errors.price && (\n                        <div className=\"invalid-feedback\">{errors.price}</div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>discountPrice.</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"discountPrice\"\n                        placeholder=\"Description\"\n                        value={values.discountPrice}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.discountPrice && errors.discountPrice\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.discountPrice && errors.discountPrice && (\n                        <div className=\"invalid-feedback\">\n                          {errors.discountPrice}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Stock</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"stock\"\n                        value={values.stock}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.stock && errors.stock ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.stock && errors.stock && (\n                        <div className=\"invalid-feedback\">{errors.stock}</div>\n                      )}\n                    </Col>\n                  </FormGroup>          \n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Update\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditPhone;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/purchase/purchase.js",["504","505","506","507","508","509","510"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { ChevronDown, ChevronUp, Trash, Edit, Eye } from \"react-feather\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Table,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n} from \"reactstrap\";\n\nimport Loader from \"../../components/Loader\";\n// import Paginations from \"../../components/Pagination\";\nimport {\n  NoRecordsFound,\n  TableLoadingText,\n} from \"../../components/TableLoadingText\";\nimport { history } from \"../../history\";\nimport { PurchaseService } from \"../../services/api.service\";\nimport { toast } from \"react-toastify\";\n\nconst PurchaseList = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const searchInputRef = useRef(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(1);\n  const [dataList, setDataList] = useState([]);\n  const [deleteID, setDeleteID] = useState(null);\n  const [orderBy, setOrderBy] = useState(null);\n  const [sort, setSort] = useState(null);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n\n  useEffect(() => {\n    purchaseList();\n  }, []);\n\n  const purchaseList = async () => {\n    setShowLoader(true);\n    try {\n      const data = await PurchaseService.getPurchaseList(\n        searchInputRef.current.value,\n        orderBy,\n        sort\n      );\n      setDataList(data);\n      console.log(\"DataList\", data);\n    } catch (ex) {\n      toast.error(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onDeleteRecord = async (_id) => {\n    await PurchaseService.deletePurchase(_id).then(() => {\n      purchaseList();\n    });\n    dataList.splice(deleteID, 1);\n    setDataList([...dataList]);\n    toast.error(\"Deleted Successfully\");\n    setShowDeleteAlert(false);\n    setDeleteID(null);\n  };\n\n  const _handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      purchaseList();\n    }\n  };\n\n  const changeOrderBy = (value) => {\n    let sorting = orderBy === value && sort === -1 ? 1 : -1;\n    setSort(sorting);\n    setOrderBy(value);\n  };\n\n  let salelist;\n\n  if (dataList.length > 0) {\n    salelist = dataList.map((element, index) => {\n      console.log(\"id\", element.stockByStore);\n      return (\n        <tr key={element._id}>\n          <td>{element.sellerName}</td>\n          <td>{element.sellerContact.map((item) => {\n            return item\n          }).toString()}</td>\n          <td>{element.purchaseDescription}</td>\n          <td>{element.billAmount}</td>\n          <td>{element.paidAmount}</td>\n          <td>\n          <div className=\"container\" style={{margin:\"10px\"}}>\n          <img style={{ width: 50, height: 50 }} src={element.billImage} />\n          </div>\n          </td>\n          <td>\n            <Trash\n              size={18}\n              color={\"red\"}\n              className=\"cursor-pointer\"\n              onClick={() => {\n                onDeleteRecord(element._id);\n                setDeleteID(index);\n                setShowDeleteAlert(true);\n              }}\n            />\n            <Edit\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/EditPurchase/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n            <Eye\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/ViewPurchase/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n          </td>\n        </tr>\n      );\n    });\n  } else {\n    salelist = <NoRecordsFound colSpan={8} />;\n  }\n\n  return (\n    <Card>\n      {showLoader && <Loader />}\n      <CardHeader>\n        <CardTitle>Purchase</CardTitle>\n\n        <div className=\"float-right\">\n          <Button\n            className=\"mr-1\"\n            outline\n            color=\"primary\"\n            onClick={() => history.push(\"/AddPurchase\")}\n          >\n            Add Purchase\n          </Button>\n        </div>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <div className=\"container\">\n          <InputGroup>\n            <Input\n              type=\"text\"\n              placeholder=\"Search...\"\n              innerRef={searchInputRef}\n              onKeyDown={_handleKeyDown}\n            />\n            <InputGroupAddon\n              addonType=\"append\"\n              className=\"cursor-pointer\"\n              onClick={purchaseList}\n            >\n              Search\n            </InputGroupAddon>\n          </InputGroup>\n        </div>\n        <Table responsive className=\"mt-2\">\n          <thead>\n            <tr className=\"table-active\">\n              <th>Seller Name</th>\n              <th>Selling Mobile No</th>\n              <th>Purchase Detail</th>\n              <th>Bill Amount</th>\n              <th\n                className=\"cursor-pointer\"\n                onClick={() => changeOrderBy(\"billAmount\")}\n              >\n                Paid Amount\n                {orderBy === \"billAmount\" &&\n                  (sort === 1 ? (\n                    <ChevronUp size={14} />\n                  ) : (\n                    <ChevronDown size={14} />\n                  ))}\n              </th>\n              <th>Bill Image</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {showLoader ? <TableLoadingText colSpan={8} /> : salelist}\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default PurchaseList;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/purchase/addPurchase.js",["511","512","513","514","515"],"import React, { useState, useRef, Fragment } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../components/Loader\";\nimport { toast } from \"react-toastify\";\nimport { PurchaseService } from \"../../services/api.service\";\n\nconst AddPurchase = (props) => {\n  const [billImage, setBillImage] = useState(\"\");\n  const [removedImage, setRemovedImage] = useState(false);\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const fileUploader = useRef(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const [formValues, setFormValues] = useState({\n    sellerName: \"\",\n    sellerContact: [],\n    purchaseDescription: \"\",\n    billAmount: \"\",\n    paidAmount: \"\",\n  });\n\n\n  const onSubmit = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values, billImage };\n      const response = await PurchaseService.addPurchase(value);\n      console.log(response);\n      history.push(\"/Purchases\");\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onFileChange = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const regEx = /(.*?)\\.(jpg|jpeg|png)$/;\n    for (let file of event.target.files) {\n      const fileSize = file.size / (1024 * 1024);\n      if (!String(file[\"name\"]).toLowerCase().match(regEx)) continue;\n      if (fileSize > 3) continue;\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        setBillImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onRemoveFile = () => {\n    setBillImage(null);\n    setRemovedImage(true);\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Add Purchase</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={ Yup.object().shape({\n            sellerName: Yup.string().required(),\n            sellerContact: Yup.string().required(),\n            purchaseDescription: Yup.string().required(),\n            billAmount: Yup.string().required(),\n            paidAmount: Yup.string().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Seller Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"sellerName\"\n                        placeholder=\"Enter Seller Name\"\n                        value={values.sellerName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.sellerName && errors.sellerName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.sellerName && errors.sellerName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.sellerName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Seller Phone No.</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <FieldArray name=\"sellerContact\">\n                        {(fieldArrayProps) => {\n                          const { push, remove, form } = fieldArrayProps;\n                          return (\n                            <>\n                              <Row>\n                                {values.sellerContact.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"5\" className=\"text-center\">\n                                      <FormGroup>\n                                        <Input\n                                          type=\"number\"\n                                          name={`sellerContact[${index}]`}\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"3\">\n                                      {/* {index > 1 && ( */}\n                                      <Button\n                                        outline\n                                        style={{ color: \"red\" }}\n                                        onClick={() => remove(index)}\n                                      >\n                                        Remove\n                                      </Button>\n                                      {/* )} */}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </Row>\n                            </>\n                          );\n                        }}\n                      </FieldArray>\n                      {touched.storeMobile && errors.storeMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Purchase Detail</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"purchaseDescription\"\n                        placeholder=\"Purchase Detail\"\n                        value={values.purchaseDescription}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.purchaseDescription &&\n                          errors.purchaseDescription\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.purchaseDescription &&\n                        errors.purchaseDescription && (\n                          <div className=\"invalid-feedback\">\n                            {errors.purchaseDescription}\n                          </div>\n                        )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Bill Amount</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"billAmount\"\n                        placeholder=\"Bill Amount\"\n                        value={values.billAmount}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.billAmount && errors.billAmount\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.billAmount && errors.billAmount && (\n                        <div className=\"invalid-feedback\">\n                          {errors.billAmount}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Paid Amount</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"paidAmount\"\n                        placeholder=\"Paid Amount\"\n                        value={values.paidAmount}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.paidAmount && errors.paidAmount\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.paidAmount && errors.paidAmount && (\n                        <div className=\"invalid-feedback\">\n                          {errors.paidAmount}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Upload Bill</span>\n                    </Col>\n                    <Col md=\"1\">\n                      <Button\n                        color=\"primary\"\n                        outline\n                        onClick={() => fileUploader.current.click()}\n                      >\n                        Upload\n                      </Button>\n                    </Col>\n                    <input\n                      type=\"file\"\n                      onChange={(e) => onFileChange(e)}\n                      ref={fileUploader}\n                      hidden\n                      multiple\n                    />\n                    <br />\n                    <Col md=\"1\">\n                      {billImage && (\n                        <aside className=\"thumb-container\">\n                          <div className=\"dz-thumb\">\n                            <div className=\"dz-thumb-inner\">\n                              <img\n                                height=\"100\"\n                                width=\"100\"\n                                src={billImage}\n                                alt=\"files\"\n                                className=\"img-fluid rounded-sm\"\n                              />\n                              <span\n                                className=\"cursor-pointer\"\n                                onClick={() => onRemoveFile()}\n                              >\n                                Remove File\n                              </span>\n                            </div>\n                          </div>\n                        </aside>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Add\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default AddPurchase;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/purchase/editPurchase.js",["516","517","518","519","520","521"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, Fragment, useRef } from \"react\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst EditProduct = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [billImage, setBillImage] = useState(\"\");\n  const [removedImage, setRemovedImage] = useState(false);\n  const fileUploader = useRef(null);\n  const [initialTasks, setInitialTask] = useState({\n    sellerName: \"\",\n    sellerContact: [],\n    purchaseDescription: \"\",\n    billAmount: \"\",\n    paidAmount: \"\",\n  });\n\n  useEffect(() => {\n    loadData();\n    \n  }, []);\n    \n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/purchases/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      setInitialTask(data);\n      setBillImage(data?.billImage)\n      console.log(\"data.data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onSubmit = async (value) => {\n    try {\n      const values = { ...value, billImage }\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      await axios.put(`${API_URL}/purchases/${_id}`, values, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      history.push(\"/Purchases\");\n      toast(\"Update Successfully\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onFileChange = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const regEx = /(.*?)\\.(jpg|jpeg|png)$/;\n    for (let file of event.target.files) {\n      const fileSize = file.size / (1024 * 1024);\n      if (!String(file[\"name\"]).toLowerCase().match(regEx)) continue;\n      if (fileSize > 3) continue;\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        setBillImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  \n  const onRemoveFile = () => {\n    setBillImage(null);\n    setRemovedImage(true);\n  };\n\n  if (showLoader) return <Loader />;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Edit Purchase</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            sellerName: Yup.string().required(),\n            sellerContact: Yup.string().required(),\n            purchaseDescription: Yup.string().required(),\n            billAmount: Yup.string().required(),\n            paidAmount: Yup.string().required(),\n          })}\n          onSubmit={(values) => {\n            onSubmit(values);\n          }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Seller Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"sellerName\"\n                        value={values.sellerName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.sellerName && errors.sellerName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.sellerName && errors.sellerName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.sellerName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Seller Contact No.</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <FieldArray name=\"storeMobile\">\n                        {(fieldArrayProps) => {\n                          const { push, remove, form } = fieldArrayProps;\n                          return (\n                            <>\n                              <Row>\n                                {values.sellerContact.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"5\" className=\"text-center\">\n                                      <FormGroup>\n                                        <Input\n                                          type=\"number\"\n                                          name={`sellerContact[${index}]`}\n                                          value={element}\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"3\">\n                                      {/* {index > 1 && ( */}\n                                      <Button\n                                        outline\n                                        style={{ color: \"red\" }}\n                                        onClick={() => remove(index)}\n                                      >\n                                        Remove\n                                      </Button>\n                                      {/* )} */}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </Row>\n                            </>\n                          );\n                        }}\n                      </FieldArray>\n                      {touched.storeMobile && errors.storeMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Purchase Detail</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"purchaseDescription\"\n                        value={values.purchaseDescription}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.purchaseDescription &&\n                          errors.purchaseDescription\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.purchaseDescription &&\n                        errors.purchaseDescription && (\n                          <div className=\"invalid-feedback\">\n                            {errors.purchaseDescription}\n                          </div>\n                        )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Bill Amount</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"billAmount\"\n                        placeholder=\"Enter Bill Amount\"\n                        value={values.billAmount}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.billAmount && errors.billAmount\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.billAmount && errors.billAmount && (\n                        <div className=\"invalid-feedback\">\n                          {errors.billAmount}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Amount Paid</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"paidAmount\"\n                        value={values.paidAmount}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.paidAmount && errors.paidAmount\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.paidAmount && errors.paidAmount && (\n                        <div className=\"invalid-feedback\">\n                          {errors.paidAmount}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Upload Bill</span>\n                    </Col>\n                    <Col md=\"1\">\n                      <Button\n                        color=\"primary\"\n                        outline\n                        onClick={() => fileUploader.current.click()}\n                      >\n                        Upload\n                      </Button>\n                    </Col>\n                    <input\n                      type=\"file\"\n                      onChange={(e) => onFileChange(e)}\n                      ref={fileUploader}\n                      hidden\n                      multiple\n                    />\n                    <br />\n                    <Col md=\"1\">\n                      {billImage && (\n                        <aside className=\"thumb-container\">\n                          <div className=\"dz-thumb\">\n                            <div className=\"dz-thumb-inner\">\n                              <img\n                                height=\"100\"\n                                width=\"100\"\n                                src={billImage}\n                                alt=\"files\"\n                                className=\"img-fluid rounded-sm\"\n                              />\n                              <span\n                                className=\"cursor-pointer\"\n                                onClick={() => onRemoveFile()}\n                              >\n                                Remove File\n                              </span>\n                            </div>\n                          </div>\n                        </aside>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Edit Purchase\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditProduct;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/editSales.js",["522","523","524","525","526","527","528","529","530","531","532"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, Fragment } from \"react\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { ProductService } from \"../../services/api.service\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,   \n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport Select from \"react-select\";\n\nconst EditSales = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [productList, setProductList] = useState([]);\n  const [productDataList, setProductDataList] = useState([]);\n  const [initialTasks, setInitialTask] = useState({\n    customerName: \"\",\n    customerMobile: \"\",\n    sellDate: \"\",\n    billAmount: \"\",\n    productDetail: [],\n  });\n\n  useEffect(() => {\n    loadData();\n    loadProductList();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/sells/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n\n      console.log(data);\n      setInitialTask(data);\n      console.log(\"data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const loadProductList = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const{data} = await axios.get(`${API_URL}/products`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(\"product\",data);\n      \n      data.map((ele)=>{\n        return (ele.value = ele._id), (ele.label = ele.productName)\n      })\n      console.log(\"append\",data)\n      setProductDataList(data);\n      console.log(\"data.data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onSubmit = async (value) => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      await axios.put(`${API_URL}/sells/${_id}`, value, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      history.push(\"/Sales\");\n      toast(\"Update Successfully\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // if (showLoader) return <Loader />;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Edit Sales</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            customerName: Yup.string().required(),\n            customerMobile: Yup.string().required(),\n            sellDate: Yup.date().required(),\n            billAmount: Yup.string().required(),\n            productDetail: Yup.string().required(),\n          })}\n          onSubmit={(values) => {\n            onSubmit(values);\n          }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"customerName\"\n                        placeholder=\"Enter Customer Name\"\n                        value={values.customerName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.customerName && errors.customerName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.customerName && errors.customerName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.customerName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Mobile Number</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"customerMobile\"\n                        placeholder=\"Enter Customer Mobile No\"\n                        value={values.customerMobile}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.customerMobile && errors.customerMobile\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.customerMobile && errors.customerMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.customerMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Details</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Row>\n                        <FieldArray name=\"productDetail\">\n                          {(fieldArrayProps) => {\n                            const { push, remove, form } = fieldArrayProps;\n                            return (\n                              <>\n                                {values.productDetail.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"6\">\n                                      <FormGroup>\n                                        <span>Product</span>\n                                        <Select\n                                          options={productDataList}\n                                          value={productDataList.find(\n                                            (e) => element.productId === e._id\n                                          )}\n                                          onChange={(e) =>\n                                            setFieldValue(\n                                              `productDetail[${index}].productId`,\n                                              e?.value\n                                            )\n                                          }\n                                        />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"2\" className=\"text-center\">\n                                      <FormGroup>\n                                        <span>Quantity</span>\n                                        <Input\n                                          type=\"number\"\n                                          value={element?.productQty}\n                                          onChange={(e) => {\n                                            handleChange(e);\n                                            const selectedProduct =\n                                            productDataList.find(\n                                                (o) =>\n                                                  o._id === element.productId\n                                              );\n                                            console.log(selectedProduct);\n                                            if (selectedProduct) {\n                                              setFieldValue(\n                                                `productDetail[${index}].productTotalPrice`,\n                                                e.target.value *\n                                                  selectedProduct?.productPrice\n                                              );\n                                            }\n                                          }}\n                                          name={`productDetail[${index}].productQty`}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n\n                                    <Col md=\"2\" className=\"text-center\">\n                                      <FormGroup>\n                                        <span>Total</span>\n                                        <Input\n                                          disabled\n                                          name={`productDetail[${index}].productTotalPrice`}\n                                          onChange={handleChange}\n                                          value={element?.productTotalPrice}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n\n                                    <Col md=\"2\">\n                                      <br />\n                                      {index > 0 && (\n                                        <Button\n                                          outline\n                                          style={{ color: \"red\" }}\n                                          onClick={() => remove(index)}\n                                        >\n                                          Remove\n                                        </Button>\n                                      )}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() =>\n                                      push({\n                                        productId: \"\",\n                                        productTotalPrice: \"\",\n                                        productQty: 0,\n                                      })\n                                    }\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </>\n                            );\n                          }}\n                        </FieldArray>\n                        {touched.productPurchased &&\n                          errors.productPurchased && (\n                            <div className=\"invalid-feedback\">\n                              {errors.productPurchased}\n                            </div>\n                          )}\n                      </Row>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Date</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"date\"\n                        name=\"sellDate\"\n                        value={values.sellDate}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.sellDate && errors.sellDate\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.sellDate && errors.sellDate && (\n                        <div className=\"invalid-feedback\">\n                          {errors.sellDate}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Bill Amount</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"billAmount\"\n                        value={values.billAmount}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.billAmount && errors.billAmount\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.billAmount && errors.billAmount && (\n                        <div className=\"invalid-feedback\">\n                          {errors.billAmount}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Update\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditSales;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/sales.js",["533","534","535","536","537","538","539"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  ChevronDown,\n  ChevronUp,\n  Trash,\n  Edit,\n  Eye,\n  FilePlus,\n} from \"react-feather\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Table,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n} from \"reactstrap\";\n\nimport Loader from \"../../components/Loader\";\n// import Paginations from \"../../components/Pagination\";\nimport {\n  NoRecordsFound,\n  TableLoadingText,\n} from \"../../components/TableLoadingText\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { history } from \"../../history\";\nimport { SalesService } from \"../../services/api.service\";\nimport { toast } from \"react-toastify\";\n\n\nconst SalesLists = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const searchInputRef = useRef(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(1);\n  const [dataList, setDataList] = useState([]);\n  const [deleteID, setDeleteID] = useState(null);\n  const [orderBy, setOrderBy] = useState(null);\n  const [sort, setSort] = useState(null);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n\n  useEffect(() => {\n    salesLists();\n  }, []);\n\n  const salesLists = async () => {\n    setShowLoader(true);\n    try {\n      const data = await SalesService.getsalesList(\n        searchInputRef.current.value,\n        orderBy,\n        sort\n      );\n      setDataList(data);\n      console.log(\"DataList\", data);\n    } catch (ex) {\n      toast.error(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onDeleteRecord = async (_id) => {\n    await SalesService.deletSales(_id).then(() => {\n      salesLists();\n    });\n    dataList.splice(deleteID, 1);\n    setDataList([...dataList]);\n    toast.error(\"Record Deleted Successfully\");\n    setShowDeleteAlert(false);\n    setDeleteID(null);\n  };\n\n  const _handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      salesLists();\n    }\n  };\n\n  const changeOrderBy = (value) => {\n    let sorting = orderBy === value && sort === -1 ? 1 : -1;\n    setSort(sorting);\n    setOrderBy(value);\n  };\n\n  let salelist;\n\n  if (dataList.length > 0) {\n    salelist = dataList.map((element, index) => {\n      console.log(\"id\", element.stockByStore);\n      return (\n        <tr key={element._id}>\n          <td>{element.customerName}</td>\n          <td>{element.sellDate}</td>\n          <td>{element.customerMobile}</td>\n          <td>\n            {element.productDetail.map((item, subindex) => {\n              return (\n                <p key={subindex} className=\"m-0\">\n                  qty: {item.productQty}, total: {item.productTotalPrice}\n                </p>\n              );\n            })}\n          </td>\n          <td>{element.billAmount}</td>\n          <td>\n            <Trash\n              size={18}\n              color={\"red\"}\n              className=\"cursor-pointer\"\n              onClick={() => {\n                onDeleteRecord(element._id);\n                setDeleteID(index);\n                setShowDeleteAlert(true);\n              }}\n            />\n            <Edit\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/EditSales/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n            <Eye\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/ViewSales/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n          </td>\n          <td>\n            <FilePlus\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              className=\"cursor-pointer\"\n              onClick={() => history.push(`/ViewInvoiceDetails/${element._id}`)}\n            />\n            Invoice\n          </td>\n        </tr>\n      );\n    });\n  } else {\n    salelist = <NoRecordsFound colSpan={8} />;\n  }\n\n  return (\n    <Card>\n      {showLoader && <Loader />}\n      <CardHeader>\n        <CardTitle>Sales</CardTitle>\n\n        <div className=\"float-right\">\n          <Button\n            className=\"mr-1\"\n            outline\n            color=\"primary\"\n            onClick={() => history.push(\"/AddSales\")}\n          >\n            Add Sales\n          </Button>\n        </div>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <div className=\"container\">\n          <InputGroup>\n            <Input\n              type=\"text\"\n              placeholder=\"Search...\"\n              innerRef={searchInputRef}\n              onKeyDown={_handleKeyDown}\n            />\n            <InputGroupAddon\n              addonType=\"append\"\n              className=\"cursor-pointer\"\n              onClick={salesLists}\n            >\n              Search\n            </InputGroupAddon>\n          </InputGroup>\n        </div>\n        <Table responsive className=\"mt-2\">\n          <thead>\n            <tr className=\"table-active\">\n              <th>Customer Name</th>\n              <th>Selling Date</th>\n              <th>Customer Mobile</th>\n              <th>Product Details</th>\n              <th\n                className=\"cursor-pointer\"\n                onClick={() => changeOrderBy(\"billAmount\")}\n              >\n                Bill Amount\n                {orderBy === \"billAmount\" &&\n                  (sort === 1 ? (\n                    <ChevronUp size={14} />\n                  ) : (\n                    <ChevronDown size={14} />\n                  ))}\n              </th>\n              <th>Action</th>\n              <th>Generate Invoice</th>\n            </tr>\n          </thead>\n          <tbody>\n            {showLoader ? <TableLoadingText colSpan={8} /> : salelist}\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default SalesLists;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/addSales.js",["540","541","542","543","544","545"],"import React, { Fragment, useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n  CustomInput,\n} from \"reactstrap\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../components/Loader\";\nimport Select from \"react-select\";\nimport { toast } from \"react-toastify\";\nimport {\n  ProductService,\n  SalesService,\n  StoreService,\n} from \"../../services/api.service\";\n\nconst AddSales = (props) => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const [productList, setProductList] = useState([]);\n  const [storeIds, setStoreIds] = useState([]);\n  const [formValues, setFormValues] = useState({\n    storeId:\"\",\n    customerName: \"\",\n    customerMobile: \"\",\n    sellDate: \"\",\n    billAmount: \"\",\n    productDetail: [],\n  });\n\n  useEffect(() => {\n    getProductLists();\n    getStoreList();\n  }, []);\n\n  const getProductLists = async () => {\n    try {\n      const data = await ProductService.getProductList();\n      setProductList(\n        data.map((ele) => {\n          return { value: ele._id, label: ele.productName, ...ele };\n        })\n      );\n         \n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const getStoreList = async () => {\n    try {\n      const storeData = await StoreService.getstoreLists();\n      setStoreIds(\n        storeData.map((s) => {\n          return { value: s._id, label: s.storeAddress, ...s };\n        })\n      );\n      console.log(\"store\", storeData);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onSubmit = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values };\n      const response = await SalesService.addSales(value);\n      toast.success(\"Record Added Successfully\")\n      history.push(\"/Sales\");\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Add Sales</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            storeId: Yup.string().required(),\n            customerName: Yup.string().required(),\n            customerMobile: Yup.number().required(),\n            productDetail: Yup.string().required(),\n            sellDate: Yup.date().required(),\n            billAmount: Yup.number().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Location</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Select name=\"storeId\" options={storeIds}\n                      onChange={(e)=>{\n                        setFieldValue(`storeId`, e?.value)\n                      }} \n                      />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"customerName\"\n                        placeholder=\"Enter Customer Name\"\n                        value={values.customerName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.customerName && errors.customerName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.customerName && errors.customerName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.customerName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Mobile Number</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"customerMobile\"\n                        placeholder=\"Enter Customer Mobile No\"\n                        value={values.customerMobile}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.customerMobile && errors.customerMobile\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.customerMobile && errors.customerMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.customerMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Details</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Row>\n                        <FieldArray name=\"productDetail\">\n                          {(fieldArrayProps) => {\n                            const { push, remove, form } = fieldArrayProps;\n                            return (\n                              <>\n                                {values.productDetail.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"6\">\n                                      <FormGroup>\n                                        <span>Product</span>\n                                        <Select\n                                          options={productList}\n                                          onChange={(e) =>\n                                            setFieldValue(\n                                              `productDetail[${index}].productId`,\n                                              e?.value\n                                            )\n                                          }\n                                        />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"2\" className=\"text-center\">\n                                      <FormGroup>\n                                        <span>Quantity</span>\n                                        <Input\n                                          type=\"number\"\n                                          onChange={(e) => {\n                                            handleChange(e);\n                                            const selectedProduct =\n                                              productList.find(\n                                                (o) =>\n                                                  o._id === element.productId\n                                              );\n                                            console.log(selectedProduct);\n                                            if (selectedProduct) {\n                                              setFieldValue(\n                                                `productDetail[${index}].productTotalPrice`,\n                                                e.target.value *\n                                                  selectedProduct?.productPrice\n                                              );\n                                            }\n                                          }}\n                                          name={`productDetail[${index}].productQty`}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n\n                                    <Col md=\"2\" className=\"text-center\">\n                                      <FormGroup>\n                                        <span>Total</span>\n                                        <Input\n                                          disabled\n                                          name={`productDetail[${index}].productTotalPrice`}\n                                          value={element?.productTotalPrice}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n\n                                    <Col md=\"2\">\n                                      <br />\n                                      {index > 0 && (\n                                        <Button\n                                          outline\n                                          style={{ color: \"red\" }}\n                                          onClick={() => remove(index)}\n                                        >\n                                          Remove\n                                        </Button>\n                                      )}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() =>\n                                      push({\n                                        productId: \"\",\n                                        productTotalPrice: \"\",\n                                        productQty: 0,\n                                      })\n                                    }\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </>\n                            );\n                          }}\n                        </FieldArray>\n                        {touched.productPurchased &&\n                          errors.productPurchased && (\n                            <div className=\"invalid-feedback\">\n                              {errors.productPurchased}\n                            </div>\n                          )}\n                      </Row>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Date</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"date\"\n                        name=\"sellDate\"\n                        value={values.sellDate}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.sellDate && errors.sellDate\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.sellDate && errors.sellDate && (\n                        <div className=\"invalid-feedback\">\n                          {errors.sellDate}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Bill Amount</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"billAmount\"\n                        value={values.billAmount}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.billAmount && errors.billAmount\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.billAmount && errors.billAmount && (\n                        <div className=\"invalid-feedback\">\n                          {errors.billAmount}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Add\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default AddSales;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/addCategory.js",["546","547","548"],"import React, { useState } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../components/Loader\";\nimport { toast } from \"react-toastify\";\nimport { CategoryService } from \"../../services/api.service\";\nimport Select from \"react-select\";\nimport * as jsondata from \"../../views/output.json\";\nimport Icon from \"@material-ui/core/Icon\";\n\nconst AddCategory = (props) => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const [formValues, setFormValues] = useState({\n    name: \"\",\n    description: \"\",\n    icon: \"\",\n    parent_id: \"\",\n  });\n\n  const jsonicons = jsondata.default.map((obj) => {\n    return { value: obj, label: <Icon>{obj}</Icon>, ...obj };\n  });\n\n  const onSubmit = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values };\n      const response = await CategoryService.addCategory(null,value);\n      console.log(response);\n      history.push(\"/CategoryList\");\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Add Category</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            name: Yup.string().required(),\n            // parent_id: Yup.string().required(),\n            description: Yup.string().required(),\n            icon: Yup.string().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Category Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"name\"\n                        value={values.name}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.name && errors.name ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.name && errors.name && (\n                        <div className=\"invalid-feedback\">{errors.name}</div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Description</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"description\"\n                        placeholder=\"description\"\n                        value={values.description}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.description && errors.description\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.description && errors.description && (\n                        <div className=\"invalid-feedback\">\n                          {errors.description}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span> Category Icons</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Select\n                        options={jsonicons}\n                        onChange={(e) => setFieldValue(`icon`, e?.value)}\n                      />\n                    </Col>\n                  </FormGroup>\n\n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Add\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default AddCategory;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/stores/storeList.js",["549","550","551","552","553","554"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { ChevronDown, ChevronUp, Trash, Edit, Eye } from \"react-feather\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Table,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n} from \"reactstrap\";\nimport Loader from \"../../components/Loader\";\nimport {\n  NoRecordsFound,\n  TableLoadingText,\n} from \"../../components/TableLoadingText\";\nimport { history } from \"../../history\";\nimport { StoreService } from \"../../services/api.service\";\nimport { toast } from \"react-toastify\";\n\nconst StoreList = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const searchInputRef = useRef(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(1);\n  const [dataList, setDataList] = useState([]);\n  const [deleteID, setDeleteID] = useState(null);\n  const [orderBy, setOrderBy] = useState(null);\n  const [sort, setSort] = useState(null);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n\n  useEffect(() => {\n    getStoreList();\n  }, []);\n\n  const getStoreList = async () => {\n    setShowLoader(true);\n    try {\n      const data = await StoreService.getstoreLists(\n        currentPage,\n        searchInputRef.current.value,\n        orderBy,\n        sort\n      );\n      setDataList(data);\n      console.log(\"DataList\", dataList);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onDeleteRecord = async (_id) => {\n    await StoreService.deleteStore(_id).then(() => {\n      getStoreList();\n    });\n\n    dataList.splice(deleteID, 1);\n    setDataList([...dataList]);\n    toast.error(\"Record Deleted Successfully\");\n    setShowDeleteAlert(false);\n    setDeleteID(null);\n  };\n\n  const _handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      getStoreList();\n    }\n  };\n\n  const changeOrderBy = (value) => {\n    let sorting = orderBy === value && sort === -1 ? 1 : -1;\n    setSort(sorting);\n    setOrderBy(value);\n  };\n\n  console.log(\"data\", dataList);\n\n  let storelist;\n\n  if (dataList.length > 0) {\n    storelist = dataList.map((element, index) => {\n      console.log(\"id\", element._id);\n      return (\n        <tr key={element._id}>\n          <td>{element.storeName}</td>\n          <td>{element.storeManagerName}</td>\n          <td>\n          <div className=\"container\" style={{margin:\"10px\"}}>\n          <img style={{ width: 50, height: 50 }} src={element.storeLogo} />\n          </div>\n          </td>\n          <td>{element.storeAddress}</td>\n          <td\n            style={\n              element.storeStatus === \"true\"\n                ? { color: \"green\" }\n                : { color: \"red\" }\n            }\n          >\n            {element.storeStatus === \"true\" ? \"Active\" : \"Not Active\"}\n          </td>\n          <td>\n            {element.storeMobile.toString()}\n          </td>\n          <td>\n            <Trash\n              size={18}\n              color={\"red\"}\n              className=\"cursor-pointer\"\n              onClick={() => {\n                onDeleteRecord(element._id);\n                setDeleteID(index);\n                setShowDeleteAlert(true);\n              }}\n            />\n            <Edit\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/EditStore/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n            <Eye\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/ViewStore/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n          </td>\n        </tr>\n      );\n    });\n  } else {\n    storelist = <NoRecordsFound colSpan={8} />;\n  }\n\n  return (\n    <Card>\n      {showLoader && <Loader />}\n      <CardHeader>\n        <CardTitle>Stores</CardTitle>\n\n        <div className=\"float-right\">\n          <Button\n            className=\"mr-1\"\n            outline\n            color=\"primary\"\n            onClick={() => history.push(\"/AddStore\")}\n          >\n            Add Store\n          </Button>\n        </div>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <div className=\"container\">\n          <InputGroup>\n            <Input\n              type=\"text\"\n              placeholder=\"Search...\"\n              innerRef={searchInputRef}\n              onKeyDown={_handleKeyDown}\n            />\n            <InputGroupAddon\n              addonType=\"append\"\n              className=\"cursor-pointer\"\n              onClick={getStoreList}\n            >\n              Search\n            </InputGroupAddon>\n          </InputGroup>\n        </div>\n        <Table responsive className=\"mt-2\">\n          <thead>\n            <tr className=\"table-active\">\n              <th\n                className=\"cursor-pointer\"\n                onClick={() => changeOrderBy(\"fromUser\")}\n              >\n                Store Name\n                {orderBy === \"fromUser\" &&\n                  (sort === 1 ? (\n                    <ChevronUp size={14} />\n                  ) : (\n                    <ChevronDown size={14} />\n                  ))}\n              </th>\n              <th>Store Manager</th>\n              <th>Store Logo</th>\n              <th>Address</th>\n              <th>Status</th>\n              <th>Mnos</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {showLoader ? <TableLoadingText colSpan={8} /> : storelist}\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default StoreList;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/stores/addStore.js",["555","556","557","558","559"],"import React, { Fragment, useEffect, useState, useRef } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../components/Loader\";\nimport { toast } from \"react-toastify\";\nimport { StoreService } from \"../../services/api.service\";\n\nconst AddStore = (props) => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [dataList, setDataList] = useState([]);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const [formValues, setFormValues] = useState({\n    storeName: \"\",\n    storeManagerName: \"\",\n    storeLogo: \"\",\n    storeAddress: \"\",\n    storeMobile: [],\n    storeStatus: [{ name: \"true\" }, { name: \"false\" }],\n  });\n  const [storeLogo, setStoreLogo] = useState(\"\");\n  const [removedImage, setRemovedImage] = useState(false);\n  const fileUploader = useRef(null);\n\n  useEffect(() => {\n    getStoreLists();\n  }, []);\n\n  const getStoreLists = async () => {\n    setShowLoader(true);\n    try {\n      const results = await StoreService.getstoreLists();\n      console.log(\"data\", results);\n      setDataList(results);\n      console.log(dataList);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onSubmit = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values, storeLogo };\n      const response = await StoreService.addstore(value);\n      console.log(response);\n      toast.success(`${value.storeName} :: Added Successfully`);\n      history.push(\"/Store\");\n    } catch (error) {\n      // setErrorText(error.message);\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onFileChange = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const regEx = /(.*?)\\.(jpg|jpeg|png)$/;\n    for (let file of event.target.files) {\n      const fileSize = file.size / (1024 * 1024);\n      if (!String(file[\"name\"]).toLowerCase().match(regEx)) continue;\n      if (fileSize > 3) continue;\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        setStoreLogo(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onRemoveFile = () => {\n    setStoreLogo(null);\n    setRemovedImage(true);\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Add Store</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            storeName: Yup.string().required(),\n            storeManagerName: Yup.string().required(),\n            storeAddress: Yup.string().required(),\n            storeMobile: Yup.number().required(),\n            storeStatus: Yup.string().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"storeName\"\n                        placeholder=\"Enter Store Name\"\n                        value={values.storeName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.storeName && errors.storeName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.storeName && errors.storeName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Manager</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"storeManagerName\"\n                        placeholder=\"Enter Store Manager Name\"\n                        value={values.storeManagerName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.storeManagerName && errors.storeManagerName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.storeManagerName && errors.storeManagerName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeManagerName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Logo</span>\n                    </Col>\n\n                    <Col md=\"1\">\n                      <Button\n                        color=\"primary\"\n                        outline\n                        onClick={() => fileUploader.current.click()}\n                      >\n                        Upload\n                      </Button>\n                    </Col>\n                    <input\n                      type=\"file\"\n                      onChange={(e) => onFileChange(e)}\n                      ref={fileUploader}\n                      hidden\n                      multiple\n                    />\n                    <br />\n                    <Col md=\"1\">\n                      {storeLogo && (\n                        <aside className=\"thumb-container\">\n                          <div className=\"dz-thumb\">\n                            <div className=\"dz-thumb-inner\">\n                              <img\n                                height=\"100\"\n                                width=\"100\"\n                                src={storeLogo}\n                                alt=\"files\"\n                                className=\"img-fluid rounded-sm\"\n                              />\n                              <span\n                                className=\"cursor-pointer\"\n                                onClick={() => onRemoveFile()}\n                              >\n                                Remove File\n                              </span>\n                            </div>\n                          </div>\n                        </aside>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Address</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"storeAddress\"\n                        placeholder=\"Enter Address\"\n                        value={values.storeAddress}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.storeAddress && errors.storeAddress\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.storeAddress && errors.storeAddress && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeAddress}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Phone Numbers</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <FieldArray name=\"storeMobile\">\n                        {(fieldArrayProps) => {\n                          const { push, remove, form } = fieldArrayProps;\n                          const { values } = form;\n                          const { storeMobile } = values;\n                          return (\n                            <>\n                              <Row>\n                                {storeMobile.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"5\" className=\"text-center\">\n                                      <FormGroup>\n                                        <Input\n                                          type=\"number\"\n                                          name={`storeMobile[${index}]`}\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"3\">\n                                      {/* {index > 1 && ( */}\n                                      <Button\n                                        outline\n                                        style={{ color: \"red\" }}\n                                        onClick={() => remove(index)}\n                                      >\n                                        Remove\n                                      </Button>\n                                      {/* )} */}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </Row>\n                            </>\n                          );\n                        }}\n                      </FieldArray>\n                      {touched.storeMobile && errors.storeMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Status</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"select\"\n                        name=\"storeStatus\"\n                        value={values.storeStatus}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.storeStatus && errors.storeStatus\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      >\n                        <option value=\"\">Status</option>\n                        {formValues.storeStatus.map((option, index) => (\n                          <option key={index} value={option.name}>\n                            {option.name === \"true\" ? \"Active\" : \"Not Active\"}\n                          </option>\n                        ))}\n\n                        {touched.storeStatus && errors.storeStatus && (\n                          <div className=\"invalid-feedback\">\n                            {errors.storeStatus}\n                          </div>\n                        )}\n                      </Input>\n                    </Col>\n                  </FormGroup>\n\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Add Store\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default AddStore;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/stores/editStore.js",["560","561","562","563","564","565"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef, Fragment } from \"react\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst EditStore = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [initialTasks, setInitialTask] = useState({\n    storeName: \"\",\n    storeManagerName: \"\",\n    storeLogo: \"\",\n    storeAddress: \"\",\n    storeMobile: [],\n    storeStatus: [{name:\"true\"}, {name:\"false\"}],\n  });\n  const [storeLogo, setStoreLogo] = useState(\"\");\n  const [removedImage, setRemovedImage] = useState(false);\n  const fileUploader = useRef(null);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/stores/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      setInitialTask(data);\n      setStoreLogo(data.storeLogo);\n      console.log(\"data.data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onSubmit = async (value) => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      await axios.put(`${API_URL}/stores/${_id}`, value, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      history.push(\"/Store\");\n      toast(\"Update Successfully\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onFileChange = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const regEx = /(.*?)\\.(jpg|jpeg|png)$/;\n    for (let file of event.target.files) {\n      const fileSize = file.size / (1024 * 1024);\n      if (!String(file[\"name\"]).toLowerCase().match(regEx)) continue;\n      if (fileSize > 3) continue;\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        setStoreLogo(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onRemoveFile = () => {\n    setStoreLogo(null);\n    setRemovedImage(true);\n  };\n\n  if (showLoader) return <Loader />;\n  console.log(\"storeMobile\", initialTasks.storeMobile);\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Edit Store</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            storeName: Yup.string().required(),\n            storeManagerName: Yup.string().required(),\n            storeAddress: Yup.string().required(),\n            storeMobile: Yup.string().required(),\n            storeStatus: Yup.string().required(),\n          })}\n          onSubmit={(values) => {\n            onSubmit(values);\n          }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"storeName\"\n                        placeholder=\"Enter Store Name\"\n                        value={values.storeName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.storeName && errors.storeName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.storeName && errors.storeName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Manager</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"storeManagerName\"\n                        placeholder=\"Enter Store Manager Name\"\n                        value={values.storeManagerName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.storeManagerName && errors.storeManagerName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.storeManagerName && errors.storeManagerName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeManagerName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Address</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"storeAddress\"\n                        placeholder=\"Enter Address\"\n                        value={values.storeAddress}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.storeAddress && errors.storeAddress\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.storeAddress && errors.storeAddress && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeAddress}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Logo</span>\n                    </Col>\n                    <Col md=\"1\">\n                      <Button\n                        color=\"primary\"\n                        outline\n                        onClick={() => fileUploader.current.click()}\n                      >\n                        Upload\n                      </Button>\n                    </Col>\n                    <input\n                      type=\"file\"\n                      onChange={(e) => onFileChange(e)}\n                      ref={fileUploader}\n                      hidden\n                      multiple\n                    />\n                    <br />\n                    <Col md=\"1\">\n                      {storeLogo && (\n                        <aside className=\"thumb-container\">\n                          <div className=\"dz-thumb\">\n                            <div className=\"dz-thumb-inner\">\n                              <img\n                                height=\"100\"\n                                width=\"100\"\n                                src={storeLogo}\n                                alt=\"files\"\n                                className=\"img-fluid rounded-sm\"\n                              />\n                              <span\n                                className=\"cursor-pointer\"\n                                onClick={() => onRemoveFile()}\n                              >\n                                Remove File\n                              </span>\n                            </div>\n                          </div>\n                        </aside>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Status</span>\n                    </Col>\n                    <Col md=\"2\">\n                      <Input\n                        style={\n                          values.storeStatus === \"true\"\n                            ? { color: \"green\" }\n                            : { color: \"red\" }\n                        }\n                        type=\"select\"\n                        name=\"storeStatus\"\n                        value={values.storeStatus}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.storeStatus && errors.storeStatus\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      >\n                        <option value={true}>Active</option>\n                        <option value={false}>Not Active</option>\n                        {touched.storeStatus && errors.storeStatus && (\n                          <div className=\"invalid-feedback\">\n                            {errors.storeStatus}\n                          </div>\n                        )}\n                      </Input>\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Phone Numbers</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <FieldArray name=\"storeMobile\">\n                        {(fieldArrayProps) => {\n                          const { push, remove, form } = fieldArrayProps;\n                          return (\n                            <>\n                              <Row>\n                                {values.storeMobile.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"5\" className=\"text-center\">\n                                      <FormGroup>\n                                        <Input\n                                          type=\"number\"\n                                          name={`storeMobile[${index}]`}\n                                          value={element}\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"3\">\n                                      {/* {index > 1 && ( */}\n                                      <Button\n                                        outline\n                                        style={{ color: \"red\" }}\n                                        onClick={() => remove(index)}\n                                      >\n                                        Remove\n                                      </Button>\n                                      {/* )} */}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </Row>\n                            </>\n                          );\n                        }}\n                      </FieldArray>\n                      {touched.storeMobile && errors.storeMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Edit Store\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditStore;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/categoryList.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/stores/viewStore.js",["566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, Fragment } from \"react\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY, R_TOKEN } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n  CustomInput,\n  InputGroup,\n  InputGroupAddon,\n} from \"reactstrap\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst EditStore = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [initialTasks, setInitialTask] = useState({\n    storeName: \"\",\n    storeManagerName: \"\",\n    storeLogo: \"\",\n    storeAddress: \"\",\n    storeMobile: [],\n    storeStatus: [{ name: \"Active\" }, { name: \"NonActive\" }],\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/stores/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      setInitialTask(data);\n      console.log(\"data.data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  //   const onSubmit = async (value) => {\n  //     try {\n  //       const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n  //       await axios.put(`${API_URL}/stores/${_id}`, value,{\n  //         headers: {\n  //           Authorization: token,\n  //         },\n  //       });\n  //       history.push(\"/Store\");\n  //       toast(\"Update Successfully\")\n  //     } catch (e) {\n  //       console.log(e);\n  //     }\n  //   };\n\n  if (showLoader) return <Loader />;\n  console.log(\"storeMobile\", initialTasks.storeMobile);\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>View Store</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            storeName: Yup.string().required(),\n            storeManagerName: Yup.string().required(),\n            storeAddress: Yup.string().required(),\n            // storeMobile: Yup.string().required(),\n            storeStatus: Yup.string().required(),\n          })}\n          onSubmit={(values) => {\n            loadData(values);\n          }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.storeName} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Manager</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.storeManagerName} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Address</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.storeAddress} />\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store Status</span>\n                    </Col>\n                    <Col md=\"2\">\n                      <Input style={values.storeStatus === \"true\" ? {color : \"green\"} : {color : \"red\"}} value={values.storeStatus === \"true\" ? \"Active\" : \"Not Active\"}/>\n                      \n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Phone Numbers</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <FieldArray name=\"storeMobile\">\n                        {(fieldArrayProps) => {\n                          const { push, remove, form } = fieldArrayProps;\n                          return (\n                            <>\n                              <Row>\n                                {values.storeMobile.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"5\" className=\"text-center\">\n                                      <FormGroup>\n                                        <Input\n                                          type=\"number\"\n                                          name={`storeMobile[${index}]`}\n                                          value={element}\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"3\">\n                                      {/* {index > 1 && ( */}\n                                      {/* <Button\n                                        outline\n                                        style={{ color: \"red\" }}\n                                        onClick={() => remove(index)}\n                                      >\n                                        Remove\n                                      </Button> */}\n                                      {/* )} */}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  {/* <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button> */}\n                                </Col>\n                              </Row>\n                            </>\n                          );\n                        }}\n                      </FieldArray>\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        color=\"primary\"\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditStore;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/Product/productList.js",["582","583","584","585","586","587","588"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { ChevronDown, ChevronUp, Trash, Edit, Eye } from \"react-feather\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Table,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n} from \"reactstrap\";\n\nimport Loader from \"../../../components/Loader\";\n// import Paginations from \"../../components/Pagination\";\nimport {\n  NoRecordsFound,\n  TableLoadingText,\n} from \"../../../components/TableLoadingText\";\nimport { history } from \"../../../history\";\nimport { ProductService } from \"../../../services/api.service\";\nimport { toast } from \"react-toastify\";\nimport { AmpStories } from \"@material-ui/icons\";\n\nconst ProductLists = (props) => {\n  const [showLoader, setShowLoader] = useState(false);\n  const searchInputRef = useRef(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(1);\n  const [dataList, setDataList] = useState([]);\n  const [deleteID, setDeleteID] = useState(null);\n  const [orderBy, setOrderBy] = useState(null);\n  const [sort, setSort] = useState(null);\n  const [showDeleteAlert, setShowDeleteAlert] = useState(false);\n\n  useEffect(() => {\n    productList();\n  }, []);\n\n  const productList = async () => {\n    setShowLoader(true);\n    try {\n      const data = await ProductService.getProductList(\n        currentPage,\n        searchInputRef.current.value,\n        orderBy,\n        sort\n      );\n      setDataList(data);\n      console.log(\"DataList\", data);\n    } catch (ex) {\n      toast.error(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  // function currencyFormat(num) {\n  //   return num.toFixed(2).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g);\n  // }\n  // console.log(currencyFormat({data.productPrice}));\n\n  const onDeleteRecord = async (_id) => {\n    await ProductService.deleteProducts(_id).then(() => {\n      productList();\n    });\n    dataList.splice(deleteID, 1);\n    setDataList([...dataList]);\n    toast.error(\"Record Deleted Successfully\");\n    setShowDeleteAlert(false);\n    setDeleteID(null);\n  };\n\n  const _handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      productList();\n    }\n  };\n\n  const changeOrderBy = (value) => {\n    let sorting = orderBy === value && sort === -1 ? 1 : -1;\n    setSort(sorting);\n    setOrderBy(value);\n  };\n\n  let storelist;\n\n  if (dataList.length > 0) {\n    storelist = dataList.map((element, index) => {\n      console.log(\"id\", element.stockByStore);\n      return (\n        <tr key={element._id}>\n          {/* <td>{element._id}</td> */}\n          <td>{element.productName}</td>\n          <td>{element.brandName}</td>\n          <td>\n          <div className=\"container\" style={{margin:\"5px\"}}>\n          <img style={{ width: 50, height: 50 }} src={element.productImage} />\n          </div>\n          </td>\n          <td>{element.productPrice}</td>\n          <td>{element.discountPrice}</td>\n          <td>\n            {element.stockByStore.map((item) => {\n              return (\n                <p className=\"m-0\">\n                  store: {item.storeId}, stock: {item.stock}{\" \"}\n                </p>\n              );\n            })}\n          </td>\n          <td>\n            <Trash\n              size={18}\n              color={\"red\"}\n              className=\"cursor-pointer\"\n              onClick={() => {\n                onDeleteRecord(element._id);\n                setDeleteID(index);\n                setShowDeleteAlert(true);\n              }}\n            />\n            <Edit\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/EditProduct/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n            <Eye\n              size={18}\n              color={\"rgb(137,128,242)\"}\n              onClick={() => history.push(`/ViewProduct/${element._id}`)}\n              className=\"cursor-pointer\"\n            />\n          </td>\n        </tr>\n      );\n    });\n  } else {\n    storelist = <NoRecordsFound colSpan={8} />;\n  }\n\n  return (\n    <Card>\n      {showLoader && <Loader />}\n      <CardHeader>\n        <CardTitle>Products</CardTitle>\n\n        <div className=\"float-right\">\n          <Button\n            className=\"mr-1\"\n            outline\n            color=\"primary\"\n            onClick={() => history.push(\"/AddProduct\")}\n          >\n            Add Product\n          </Button>\n        </div>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <div className=\"container\">\n          <InputGroup>\n            <Input\n              type=\"text\"\n              placeholder=\"Search...\"\n              innerRef={searchInputRef}\n              onKeyDown={_handleKeyDown}\n            />\n            <InputGroupAddon\n              addonType=\"append\"\n              className=\"cursor-pointer\"\n              onClick={productList}\n            >\n              Search\n            </InputGroupAddon>\n          </InputGroup>\n        </div>\n        <Table responsive className=\"mt-2\">\n          <thead>\n            <tr className=\"table-active\">\n              {/* <th> Product Id </th> */}\n              <th\n                className=\"cursor-pointer\"\n                onClick={() => changeOrderBy(\"fromUser\")}\n              >\n                Product Name\n                {orderBy === \"fromUser\" &&\n                  (sort === 1 ? (\n                    <ChevronUp size={14} />\n                  ) : (\n                    <ChevronDown size={14} />\n                  ))}\n              </th>\n              <th>Brand Name</th>\n              <th>Product Image</th>\n              <th>Product Price</th>\n              <th>Discount Price</th>\n              <th>Stock By Store</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {showLoader ? <TableLoadingText colSpan={8} /> : storelist}\n          </tbody>\n        </Table>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ProductLists;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/Product/addProduct.js",["589","590","591","592","593","594","595"],"import React, { Fragment, useEffect, useState, useRef } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport Select from \"react-select\";\nimport { toast } from \"react-toastify\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../../components/Loader\";\nimport {\n  CategoryService,\n  ProductService,\n  StoreService,\n} from \"../../../services/api.service\";\nimport { useParams } from \"react-router-dom\";\n\nconst AddProduct = (props) => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [dataList, setDataList] = useState([]);\n  const [cateList, setCateList] = useState([]);\n  const [subCateList, setSubCateList] = useState([]);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n  // const { _id } = useParams();\n  const [formValues, setFormValues] = useState({\n    category_id: \"\",\n    subCategory_id: \"\",\n    productName: \"\",\n    brandName: \"\",\n    productPrice: \"\",\n    discountPrice: \"\",\n    stockByStore: [],\n  });\n  const [productImage, setProductImage] = useState(\"\");\n  const [removedImage, setRemovedImage] = useState(false);\n  const fileUploader = useRef(null);\n\n  useEffect(() => {\n    getStoreList();\n    categoriesList();\n  }, []);\n\n  const categoriesList = async (parenId = null) => {\n    // setShowLoader(true);\n    try {\n      const cdata = await CategoryService.getCategoryList(parenId);\n      if (parenId) {\n        setSubCateList(\n          cdata.map((obj) => {\n            return { value: obj._id, label: obj.name, ...obj };\n          })\n        );\n      } else {\n        setCateList(\n          cdata.map((ele) => {\n            return { value: ele._id, label: ele.name, ...ele };\n          })\n        );\n      }\n      console.log(\"Category _id\", cdata);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const getStoreList = async () => {\n    // setShowLoader(true);\n    try {\n      const data = await StoreService.getstoreLists();\n      setDataList(\n        data.map((obj) => {\n          return { value: obj._id, label: obj.storeAddress, ...obj };\n        })\n      );\n      // console.log(dataList);\n    } catch (ex) {\n      toast.error(ex)\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onSubmit = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values, productImage };\n      const response = await ProductService.addProduct(value);\n      console.log(response);\n      setFormValues(response)\n      toast.success(`${value.productName} :: Added Successfully`);\n      history.push(\"/Products\");\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onFileChange = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const regEx = /(.*?)\\.(jpg|jpeg|png)$/;\n    for (let file of event.target.files) {\n      const fileSize = file.size / (1024 * 1024);\n      if (!String(file[\"name\"]).toLowerCase().match(regEx)) continue;\n      if (fileSize > 3) continue;\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        setProductImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onRemoveFile = () => {\n    setProductImage(null);\n    setRemovedImage(true);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Add Product</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            category_id: Yup.string().required(),\n            subCategory_id: Yup.string().required(),\n            productName: Yup.string().required(),\n            brandName: Yup.string().required(),\n            productPrice: Yup.string().required(),\n            discountPrice: Yup.number().required(),\n            stockByStore: Yup.string().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(\"values error\", values);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Category Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Select\n                        options={cateList}\n                        onChange={(obj) => {\n                          setFieldValue(`category_id`, obj?.value);\n                          categoriesList(obj?.value);\n                        }\n                      }\n                      />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>SubCategory Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Select\n                        options={subCateList}\n                        onChange={(ele) =>\n                          setFieldValue(`subCategory_id`, ele?.value)\n                        }\n                      />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"productName\"\n                        placeholder=\"Enter Product Name\"\n                        value={values.productName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.productName && errors.productName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.productName && errors.productName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.productName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Brand Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"brandName\"\n                        placeholder=\"Enter Brand Name\"\n                        value={values.brandName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.brandName && errors.brandName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.brandName && errors.brandName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.brandName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Image</span>\n                    </Col>\n\n                    <Col md=\"1\">\n                      <Button\n                        color=\"primary\"\n                        outline\n                        onClick={() => fileUploader.current.click()}\n                      >\n                        Upload\n                      </Button>\n                    </Col>\n                    <input\n                      type=\"file\"\n                      onChange={(e) => onFileChange(e)}\n                      ref={fileUploader}\n                      hidden\n                      multiple\n                    />\n                    <br />\n                    <Col md=\"1\">\n                      {productImage && (\n                        <aside className=\"thumb-container\">\n                          <div className=\"dz-thumb\">\n                            <div className=\"dz-thumb-inner\">\n                              <img\n                                height=\"100\"\n                                width=\"100\"\n                                src={productImage}\n                                alt=\"files\"\n                                className=\"img-fluid rounded-sm\"\n                              />\n                              <span\n                                className=\"cursor-pointer\"\n                                onClick={() => onRemoveFile()}\n                              >\n                                Remove File\n                              </span>\n                            </div>\n                          </div>\n                        </aside>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"productPrice\"\n                        placeholder=\"Enter Product Price\"\n                        value={values.productPrice}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.productPrice && errors.productPrice\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.productPrice && errors.productPrice && (\n                        <div className=\"invalid-feedback\">\n                          {errors.productPrice}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Discount Price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"discountPrice\"\n                        placeholder=\"Enter Discount Price\"\n                        value={values.discountPrice}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.discountPrice && errors.discountPrice\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.discountPrice && errors.discountPrice && (\n                        <div className=\"invalid-feedback\">\n                          {errors.discountPrice}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store By Stock</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Row>\n                        {/* {JSON.stringify(values.stockByStore)} */}\n                        <FieldArray name=\"stockByStore\">\n                          {(fieldArrayProps) => {\n                            const { push, remove, form } = fieldArrayProps;\n                            return (\n                              <>\n                                {values.stockByStore.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"4\" className=\"text-center\">\n                                      <FormGroup>\n                                        <span>Location</span>\n\n                                        <Select\n                                          options={dataList}\n                                          onChange={(e) =>\n                                            setFieldValue(\n                                              `stockByStore[${index}].storeId`,\n                                              e?.value\n                                            )\n                                          }\n                                        />\n                                      </FormGroup>\n                                    </Col>\n\n                                    <Col md=\"4\" className=\"text-center\">\n                                      <span>Quantity</span>\n                                      <Input\n                                        type=\"number\"\n                                        name={`stockByStore[${index}].stock`}\n                                        onChange={handleChange}\n                                      />\n                                    </Col>\n\n                                    <Col md=\"3\">\n                                      <br />\n                                      {index > 0 && (\n                                        <Button\n                                          outline\n                                          style={{ color: \"red\" }}\n                                          onClick={() => remove(index)}\n                                        >\n                                          Remove\n                                        </Button>\n                                      )}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </>\n                            );\n                          }}\n                        </FieldArray>\n                        {touched.stockByStore && errors.stockByStore && (\n                          <div className=\"invalid-feedback\">\n                            {errors.stockByStore}\n                          </div>\n                        )}\n                      </Row>\n                    </Col>\n                  </FormGroup>\n\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Add Product\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default AddProduct;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/Product/editProduct.js",["596","597","598","599","600","601","602"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, Fragment, useRef } from \"react\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../../components/Loader\";\nimport { API_URL } from \"../../../configs/constant\";\nimport { TOKEN_KEY } from \"../../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport Select from \"react-select\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst EditProduct = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [productImage, setProductImage] = useState(\"\");\n  const [removedImage, setRemovedImage] = useState(false);\n  const fileUploader = useRef(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [storeLocations, setStoreLocations] = useState([]);\n  const [initialTasks, setInitialTask] = useState({\n    productName: \"\",\n    brandName: \"\",\n    productPrice: \"\",\n    discountPrice: \"\",\n    stockByStore: [],\n  });\n\n  useEffect(() => {\n    loadData();\n    loadStoreData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadStoreData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/stores`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      data.map((ele) => {\n        return (ele.value = ele._id), (ele.label = ele.storeAddress);\n      });\n\n      setStoreLocations(data);\n      console.log(\"data.data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/products/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      data.value = data.stockByStore;\n      setInitialTask(data);\n      setProductImage(data?.productImage);\n      console.log(\"data.data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onSubmit = async (value) => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      await axios.put(`${API_URL}/products/${_id}`, value, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      history.push(\"/Products\");\n      toast(\"Update Successfully\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onFileChange = (event) => {\n    event.stopPropagation();\n    event.preventDefault();\n    const regEx = /(.*?)\\.(jpg|jpeg|png)$/;\n    for (let file of event.target.files) {\n      const fileSize = file.size / (1024 * 1024);\n      if (!String(file[\"name\"]).toLowerCase().match(regEx)) continue;\n      if (fileSize > 3) continue;\n      const reader = new FileReader();\n      reader.onload = function (e) {\n        setProductImage(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onRemoveFile = () => {\n    setProductImage(null);\n    setRemovedImage(true);\n  };\n\n  if (showLoader) return <Loader />;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Edit Product</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            productName: Yup.string().required(),\n            brandName: Yup.string().required(),\n            productPrice: Yup.string().required(),\n            discountPrice: Yup.number().required(),\n            stockByStore: Yup.string().required(),\n          })}\n          onSubmit={(values) => {\n            onSubmit(values);\n          }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"productName\"\n                        placeholder=\"Enter Product Name\"\n                        value={values.productName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.productName && errors.productName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.productName && errors.productName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.productName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Brand Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"brandName\"\n                        placeholder=\"Enter Store Manager Name\"\n                        value={values.brandName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.brandName && errors.brandName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.brandName && errors.brandName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.brandName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"productPrice\"\n                        placeholder=\"Enter Product Price\"\n                        value={values.productPrice}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.productPrice && errors.productPrice\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.productPrice && errors.productPrice && (\n                        <div className=\"invalid-feedback\">\n                          {errors.productPrice}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Discount Price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"discountPrice\"\n                        placeholder=\"Enter Discount Price\"\n                        value={values.discountPrice}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.discountPrice && errors.discountPrice\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.discountPrice && errors.discountPrice && (\n                        <div className=\"invalid-feedback\">\n                          {errors.discountPrice}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store By Stock</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Row>\n                        \n                        <FieldArray name=\"stockByStore\">\n                          {(fieldArrayProps) => {\n                            const { push, remove, form } = fieldArrayProps;\n                            return (\n                              <>\n                                {values.stockByStore.map((element, index) => {\n                                  return (\n                                    <Fragment key={index}>\n                                      <Col md=\"4\" className=\"text-center\">\n                                        <FormGroup>\n                                          <span>Location</span>\n                                          <Select\n                                            options={storeLocations}\n                                            value={storeLocations.find(\n                                              (e) =>\n                                                element.storeId ===\n                                                e._id\n                                            )}\n                                            onChange={(e) =>\n                                              setFieldValue(\n                                                `stockByStore[${index}].storeId`,\n                                                e?.value\n                                              )\n                                            }\n                                          />\n                                        </FormGroup>\n                                      </Col>\n\n                                      <Col md=\"4\" className=\"text-center\">\n                                        <span>Quantity</span>\n                                        <Input\n                                          type=\"number\"\n                                          value={element?.stock}\n                                          name={`stockByStore[${index}].stock`}\n                                          onChange={handleChange}\n                                        />\n                                      </Col>\n\n                                      <Col md=\"3\">\n                                        <br />\n                                        {index > 0 && (\n                                          <Button\n                                            outline\n                                            style={{ color: \"red\" }}\n                                            onClick={() => remove(index)}\n                                          >\n                                            Remove\n                                          </Button>\n                                        )}\n                                      </Col>\n                                    </Fragment>\n                                  );\n                                })}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </>\n                            );\n                          }}\n                        </FieldArray>\n                        {touched.stockByStore && errors.stockByStore && (\n                          <div className=\"invalid-feedback\">\n                            {errors.stockByStore}\n                          </div>\n                        )}\n                      </Row>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Upload Product</span>\n                    </Col>\n                    <Col md=\"1\">\n                      <Button\n                        color=\"primary\"\n                        outline\n                        onClick={() => fileUploader.current.click()}\n                      >\n                        Upload\n                      </Button>\n                    </Col>\n                    <input\n                      type=\"file\"\n                      onChange={(e) => onFileChange(e)}\n                      ref={fileUploader}\n                      hidden\n                      multiple\n                    />\n                    <br />\n                    <Col md=\"1\">\n                      {productImage && (\n                        <aside className=\"thumb-container\">\n                          <div className=\"dz-thumb\">\n                            <div className=\"dz-thumb-inner\">\n                              <img\n                                height=\"100\"\n                                width=\"100\"\n                                src={productImage}\n                                alt=\"files\"\n                                className=\"img-fluid rounded-sm\"\n                              />\n                              <span\n                                className=\"cursor-pointer\"\n                                onClick={() => onRemoveFile()}\n                              >\n                                Remove File\n                              </span>\n                            </div>\n                          </div>\n                        </aside>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Edit Product\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditProduct;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Complaint/viewComplaint.js",["603","604","605","606","607","608","609","610","611","612","613","614"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n  CustomInput,\n  InputGroup,\n  InputGroupAddon,\n} from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\n\nconst EditStore = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [initialTasks, setInitialTask] = useState({\n    customerName: \"\",\n    customerMobile: \"\",\n    issueDetail: \"\",\n    complaintDate: \"\",\n    complaintStatus: [{ name: \"true\" }, { name: \"false\" }],\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/complaints/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      setInitialTask(data);\n      console.log(\"data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>View Complaint</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            customerName: Yup.string().required(),\n            customerMobile: Yup.string().required(),\n            issueDetail: Yup.string().required(),\n            complaintDate: Yup.date().required(),\n            complaintStatus: Yup.string().required(),\n          })}\n          \n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={initialTasks.customerName} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Mobile No</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={initialTasks.customerMobile} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Issue Details</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={initialTasks.issueDetail} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Complaint Date</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={initialTasks.complaintDate} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Complaint Status</span>\n                    </Col>\n                    <Col md=\"2\">\n                    <Input style={values.storeStatus === \"true\" ? {color : \"green\"} : {color : \"red\"}} value={values.storeStatus === \"true\" ? \"Solved\" : \"Pending\"}/>\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button color=\"primary\" onClick={() => history.goBack()}>\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditStore;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Complaint/editComplaint.js",["615","616","617","618"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst EditComplaint = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [initialTasks, setInitialTask] = useState({\n    customerName: \"\",\n    customerMobile: \"\",\n    issueDetail: \"\",\n    complaintDate: \"\",\n    storeStatus: [{name:\"true\"}, {name:\"false\"}],\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/complaints/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      setInitialTask(data);\n      console.log(\"data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onSubmit = async (value) => {\n       \n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      await axios.put(`${API_URL}/complaints/${_id}`, value, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      history.push(\"/Complaints\");\n      toast(\"Update Successfully\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Edit Complaint</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            customerName: Yup.string().required(),\n            customerMobile: Yup.string().required(),\n            issueDetail: Yup.string().required(),\n            complaintDate: Yup.date().required(),\n            complaintStatus: Yup.string().required(),\n          })}\n          onSubmit={(values) => {\n            onSubmit(values);\n          }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"customerName\"\n                        placeholder=\"Enter Customer Name\"\n                        value={values.customerName}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.customerName && errors.customerName\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.customerName && errors.customerName && (\n                        <div className=\"invalid-feedback\">\n                          {errors.customerName}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Mobile</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"number\"\n                        name=\"customerMobile\"\n                        placeholder=\"Enter Customer Mobile No\"\n                        value={values.customerMobile}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.customerMobile && errors.customerMobile\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.customerMobile && errors.customerMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.customerMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Issue Details</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"issueDetail\"\n                        placeholder=\"Enter Customer Issue\"\n                        value={values.issueDetail}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.issueDetail && errors.issueDetail\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.issueDetail && errors.issueDetail && (\n                        <div className=\"invalid-feedback\">\n                          {errors.issueDetail}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Complaint Date</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"date\"\n                        name=\"complaintDate\"\n                        value={values.complaintDate}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.complaintDate && errors.complaintDate\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.complaintDate && errors.complaintDate && (\n                        <div className=\"invalid-feedback\">\n                          {errors.complaintDate}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Complaint Status</span>\n                    </Col>\n                    <Col md=\"2\">\n                      <Input\n                        type=\"select\"\n                        name=\"complaintStatus\"\n                        value={values.complaintStatus}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.complaintStatus && errors.complaintStatus\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      >\n                        <option value={true}>Solved</option>\n                        <option value={false}>Pending</option>\n                        {touched.complaintStatus && errors.complaintStatus && (\n                          <div className=\"invalid-feedback\">\n                            {errors.complaintStatus}\n                          </div>\n                        )}\n                      </Input>\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Edit Complaint\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditComplaint;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/editCategory.js",["619","620","621","622"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\nimport {toast} from \"react-toastify\"\nimport Icon from \"@material-ui/core/Icon\";\nimport * as jsondata from \"../../views/output.json\";\n\nconst EditStore = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [initialTasks, setInitialTask] = useState({\n    name: \"\",\n    description: \"\",\n    icon: \"\",\n    parentId: \"\",\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const jsonicons = jsondata.default.map((obj) => {\n    return { value: obj, label: <Icon>{obj}</Icon> };\n  });\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const {data} = await axios.get(`${API_URL}/categories/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n       data.value=data.icon;\n     \n      setInitialTask(data);\n      console.log(\"data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\nconsole.log(\"InitialValue:\",initialTasks);\n  \nconst onSubmit = async (value) => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      await axios.put(`${API_URL}/categories/${_id}`, value,{\n        headers: {\n          Authorization: token,\n        },\n      });\n      history.push(\"/CategoryList\");\n      toast(\"Update Successfully\")\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Edit Store</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            name: Yup.string().required(),\n            description: Yup.string().required(),\n            icon: Yup.string().required(),\n            // parentId: Yup.string().required(),\n          })}\n          onSubmit={(values) => {\n            onSubmit(values);\n          }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Category Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"Enter Category Name\"\n                        value={values.name}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.name && errors.name\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.name && errors.name && (\n                        <div className=\"invalid-feedback\">\n                          {errors.name}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Category Description</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"description\"\n                        placeholder=\"Enter Category Description\"\n                        value={values.description}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.description && errors.description\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.description && errors.description && (\n                        <div className=\"invalid-feedback\">\n                          {errors.description}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span> Category Icons</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Select\n                        options={jsonicons}\n                        value={jsonicons.find((ele)=> values.icon === ele.value)}\n                        onChange={(e) => setFieldValue(`icon`, e?.value)}\n                      />\n                    </Col>\n                  </FormGroup>\n                  \n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Edit Store\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditStore;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/viewCategory.js",["623","624","625"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport Icon from \"@material-ui/core/Icon\";\n\nconst EditStore = () => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [initialTasks, setInitialTask] = useState({\n    name: \"\",\n    description: \"\",\n    issueDetail: \"\",\n    icon: \"\",\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/categories/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      setInitialTask(data);\n      console.log(\"data\", data);\n      toast.success(\"data Fetched\")\n    } catch (e) {\n      toast.error(e)\n\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>View Category</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Row>\n          <Col md=\"3\"></Col>\n          <Col md=\"5\">\n            {errorText && (\n              <UncontrolledAlert color=\"danger\">{errorText}</UncontrolledAlert>\n            )}\n          </Col>\n        </Row>\n        <Form>\n          <FormGroup row>\n            <Col md=\"3\" className=\"text-center\">\n              <span>Category Name</span>\n            </Col>\n            <Col md=\"5\">\n              <Input value={initialTasks.name} />\n            </Col>\n          </FormGroup>\n          <FormGroup row>\n            <Col md=\"3\" className=\"text-center\">\n              <span>Category Description</span>\n            </Col>\n            <Col md=\"5\">\n              <Input value={initialTasks.description} />\n            </Col>\n          </FormGroup>\n          <FormGroup row>\n            <Col md=\"3\" className=\"text-center\">\n              <span>Category Icon</span>\n            </Col>\n            <Col md=\"5\">\n              <Row>\n                <Icon>{initialTasks.icon}</Icon>&nbsp;\n                <h3>\n                  <b>{initialTasks.name}</b>\n                </h3>\n              </Row>\n            </Col>\n          </FormGroup>\n          <Row>\n            <Col md=\"3\"></Col>\n            <Col md=\"5\">\n              <Button color=\"primary\" onClick={() => history.goBack()}>\n                Cancel\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default EditStore;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/subCategoryList.js",["626"],"import React, { useState, useEffect } from \"react\";\nimport { Card, CardBody, Col, Row, Button } from \"reactstrap\";\nimport { Trash, Edit, Eye } from \"react-feather\";\nimport { CategoryService } from \"../../services/api.service\";\nimport { history } from \"../../history\";\nimport { useParams } from \"react-router-dom\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { toast } from \"react-toastify\";\n\nconst SubCategortyList = () => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [dataList, setDataList] = useState([]);\n  const [deleteID, setDeleteID] = useState(null);\n  const { _id } = useParams();\n  console.log(\"catId\", _id);\n  useEffect(() => {\n    subCategoryList();\n  }, []);\n\n  const subCategoryList = async () => {\n    console.log(\"subcategoryList:\");\n    setShowLoader(true);\n    try {\n      const data = await CategoryService.getCategoryList(_id);\n      console.log(\"SubCategory Data\", data);\n      setDataList(data);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const onDeleteRecord = async (_id) => {\n    await CategoryService.deleteCategory(_id).then(() => {\n      subCategoryList();\n    });\n    dataList.splice(deleteID, 1);\n    setDataList([...dataList]);\n    toast.error(\"Category Deleted Successfully\");\n    setDeleteID(null);\n  };\n\n  console.log(\"dl\", dataList);\n  return (\n    <>\n      <div id=\"dashboard-analytics\">\n        <h4>Sub Categories!</h4>\n        <hr />\n        {dataList.map((element, index) => {\n          return (\n            <>\n              <Row className=\"match-height\">\n                <Col lg=\"2\" sm=\"6\">\n                  <Card>\n                    <CardBody className=\"pb-0\">\n                      <h4\n                        className=\"font-weight-bolder mt-1\"\n                        style={{ color: \"rgb(137,128,242)\" }}\n                      >\n                        <Icon>{element.icon}</Icon>\n                        {showLoader ? <CardBody size={8} /> : element.name}\n                      </h4>\n                      <p className=\"card-text\">* {element.description}</p>\n                      <Edit\n                        size={18}\n                        className=\"cursor-pointer\"\n                        color={\"rgb(137,128,242)\"}\n                        onClick={() => {\n                          history.push(`/EditCategory/${element._id}`);\n                        }}\n                      />\n                      &nbsp;\n                      <Trash\n                        size={18}\n                        color={\"red\"}\n                        className=\"cursor-pointer\"\n                        onClick={() => {\n                          onDeleteRecord(element._id);\n                          setDeleteID(index);\n                        }}\n                      />{\" \"}\n                      &nbsp;\n                      <Eye\n                        size={18}\n                        className=\"cursor-pointer\"\n                        color={\"rgb(137,128,242)\"}\n                        onClick={() => {\n                          history.push(`/ViewCategory/${element._id}`);\n                        }}\n                      />\n                    </CardBody>\n                    &nbsp;\n                  </Card>\n                </Col>\n              </Row>\n            </>\n          );\n        })}\n        <Row>\n          <Col md=\"2\"></Col>\n          <Col md=\"5\">\n            <Button\n              className=\"mr-3\"\n              color=\"primary\"\n              onClick={() => history.push(`/AddSubCategory/${_id}`)}\n            >\n              Add SubCategory\n            </Button>\n            <Button color=\"secondary\" outline onClick={() => history.goBack()}>\n              Cancel\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n};\n\nexport default SubCategortyList;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/addSubCategory.js",["627","628","629","630"],"import React, { useState, useRef } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"../../components/Loader\";\nimport { toast } from \"react-toastify\";\nimport { CategoryService } from \"../../services/api.service\";\nimport Select from \"react-select\";\nimport * as jsondata from \"../../views/output.json\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { useParams } from \"react-router\";\n\nconst AddSubCategory = (props) => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const { history, match } = props;\n  const [errorText, setErrorText] = useState(null);\n  const [showLoader, setShowLoader] = useState(false);\n  const { _id } = useParams();\n  console.log(_id)\n  const [formValues, setFormValues] = useState({\n    parent_id:_id,\n    name: \"\",\n    description: \"\",\n    icon: \"\",\n  });\n\n  const jsonicons = jsondata.default.map((obj) => {\n    return { value: obj, label: <Icon>{obj}</Icon> };\n  });\n\n  const onSubmit = async (values) => {\n    setErrorText(null);\n    setShowLoader(true);\n    console.log(values);\n    try {\n      const value = { ...values };\n      const response = await CategoryService.addCategory(_id ,value);\n      console.log(response);\n      console.log(response)\n      history.push(\"/CategoryList\");\n    } catch (error) {\n      toast.error(error.message);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Add SubCategory</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          initialValues={formValues}\n          onSubmit={async (values) => {\n            onSubmit(values);\n          }}\n          validationSchema={Yup.object().shape({\n            name: Yup.string().required(),\n            // parent_id: Yup.string().required(),\n            description: Yup.string().required(),\n            icon: Yup.string().required(),\n          })}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Sub Category Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"name\"\n                        value={values.name}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.name && errors.name ? \"is-invalid\" : \"\"\n                        }`}\n                      />\n                      {touched.name && errors.name && (\n                        <div className=\"invalid-feedback\">{errors.name}</div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>SubCategory Description</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        name=\"description\"\n                        placeholder=\"description\"\n                        value={values.description}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched.description && errors.description\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched.description && errors.description && (\n                        <div className=\"invalid-feedback\">\n                          {errors.description}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n                  {/* <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Parent id</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"text\"\n                        name=\"parent_id\"\n                        \n                        value={values._id}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={`${\n                          touched._id && errors._id\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                      />\n                      {touched._id && errors._id && (\n                        <div className=\"invalid-feedback\">\n                          {errors._id}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup> */}\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>SubCategory Icons</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Select\n                        options={jsonicons}\n                        onChange={(e) => setFieldValue(`icon`, e?.value)}\n                      />\n                    </Col>\n                  </FormGroup>\n\n                  <hr />\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        className=\"mr-3\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={showSubmitLoader}\n                      >\n                        {showSubmitLoader ? (\n                          <>\n                            <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\n                            <span className=\"ml-50\">Loading...</span>\n                          </>\n                        ) : (\n                          \"Add SubCategory\"\n                        )}\n                      </Button>\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default AddSubCategory;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/editSubCategory.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Category/Product/viewProduct.js",["631","632","633","634","635","636","637","638","639","640","641","642","643","644"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, Fragment } from \"react\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../../components/Loader\";\nimport { API_URL } from \"../../../configs/constant\";\nimport { TOKEN_KEY } from \"../../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport Select from \"react-select\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst ViewProduct = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [productImage, setProductImage] = useState(\"\");\n  const [initialTasks, setInitialTask] = useState({\n    productName: \"\",\n    brandName: \"\",\n    productPrice: \"\",\n    discountPrice: \"\",\n    stockByStore: [],\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/products/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      setInitialTask(data);\n      setProductImage(data?.productImage);\n      console.log(\"data.data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // const onSubmit = async (value) => {\n  //   try {\n  //     const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n  //     await axios.put(`${API_URL}/products/${_id}`, value, {\n  //       headers: {\n  //         Authorization: token,\n  //       },\n  //     });\n  //     history.push(\"/Products\");\n  //     toast(\"Update Successfully\");\n  //   } catch (e) {\n  //     console.log(e);\n  //   }\n  // };\n\n  if (showLoader) return <Loader />;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>View Product</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            productName: Yup.string().required(),\n            brandName: Yup.string().required(),\n            productPrice: Yup.string().required(),\n            discountPrice: Yup.number().required(),\n            // stockByStore: Yup.string().required(),\n          })}\n          // onSubmit={(values) => {\n          //   onSubmit(values);\n          // }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.productName} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Brand Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.brandName} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.productPrice} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Discount Price</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.discountPrice} />\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Store By Stock</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Row>\n                        \n                        <FieldArray name=\"stockByStore\">\n                          {(fieldArrayProps) => {\n                            const { push, remove, form } = fieldArrayProps;\n                            return (\n                              <>\n                                {values.stockByStore.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"4\" className=\"text-center\">\n                                      <FormGroup>\n                                        <span>Location</span>\n                                        <Input value={element?.storeId} />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"4\" className=\"text-center\">\n                                      <span>Quantity</span>\n                                      <Input value={element?.stock} />\n                                    </Col>\n                                    <Col md=\"3\">\n                                      <br />\n                                      {index > 0 && (\n                                        <Button\n                                          disabled\n                                          outline\n                                          style={{ color: \"red\" }}\n                                          onClick={() => remove(index)}\n                                        >\n                                          Remove\n                                        </Button>\n                                      )}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    disabled\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </>\n                            );\n                          }}\n                        </FieldArray>\n                        {touched.stockByStore && errors.stockByStore && (\n                          <div className=\"invalid-feedback\">\n                            {errors.stockByStore}\n                          </div>\n                        )}\n                      </Row>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Product Image</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <img\n                        style={{ width: 100, height: 100 }}\n                        src={values.productImage}\n                      />\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ViewProduct;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/viewSales.js",["645","646","647","648","649","650","651","652","653","654","655","656"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, Fragment } from \"react\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst ViewSales = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [initialTasks, setInitialTask] = useState({\n    customerName: \"\",\n    customerMobile: \"\",\n    sellDate: \"\",\n    billAmount: \"\",\n    productDetail: [],\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/sells/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n      console.log(data);\n      setInitialTask(data);\n      console.log(\"data.data\", data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  if (showLoader) return <Loader />;\n  console.log(\"storeMobile\", initialTasks.storeMobile);\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>View Sales</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            customerName: Yup.string().required(),\n            customerMobile: Yup.string().required(),\n            sellDate: Yup.date().required(),\n            billAmount: Yup.string().required(),\n            productDetail: Yup.string().required(),\n          })}\n          onSubmit={(values) => {\n            loadData(values);\n          }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.customerName} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Selling Date</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input disables type=\"date\" value={values.sellDate} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Customer Mobile No</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.customerMobile} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Prodcut Detail</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <FieldArray name=\"productDetail\">\n                        {(fieldArrayProps) => {\n                          const { push, remove, form } = fieldArrayProps;\n                          return (\n                            <>\n                              <Row>\n                                {values.productDetail.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"5\" className=\"text-center\">\n                                      <FormGroup>\n                                        <span>Product Id</span>\n                                        <Input\n                                          name={`productDetail[${index}].productId`}\n                                          value={values.productDetail.map(\n                                            (obj) => {\n                                              return obj.productId;\n                                            }\n                                          )}\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                        />\n                                      </FormGroup>\n                                      <FormGroup>\n                                      <span>Product Qty</span>\n                                        <Input\n                                          name={`productDetail[${index}].productQty`}\n                                          value={values.productDetail.map(\n                                            (obj) => {\n                                              return obj.productQty;\n                                            }\n                                          )}\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                        />\n                                      </FormGroup>\n                                      <FormGroup>\n                                        <span>Total Price</span>\n                                        <Input\n                                          name={`productDetail[${index}].productTotalPrice`}\n                                          value={values.productDetail.map(\n                                            (obj) => {\n                                              return obj.productTotalPrice;\n                                            }\n                                          )}\n                                          onChange={handleChange}\n                                          onBlur={handleBlur}\n                                        />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"3\">\n                                      {/* {index > 1 && ( */}\n                                      {/* <Button\n                                        outline\n                                        style={{ color: \"red\" }}\n                                        onClick={() => remove(index)}\n                                      >\n                                        Remove\n                                      </Button> */}\n                                      {/* )} */}\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  {/* <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button> */}\n                                </Col>\n                              </Row>\n                            </>\n                          );\n                        }}\n                      </FieldArray>\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button color=\"primary\" onClick={() => history.goBack()}>\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ViewSales;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/configs/utils.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/purchase/veiwPurchase.js",["657","658","659","660","661","662","663","664","665","666","667","668","669","670"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, Fragment } from \"react\";\nimport { Formik, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport Loader from \"../../components/Loader\";\nimport { API_URL } from \"../../configs/constant\";\nimport { TOKEN_KEY } from \"../../configs/constant\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  UncontrolledAlert,\n  Input,\n  Form,\n  FormGroup,\n  Button,\n  Spinner,\n  Col,\n  Row,\n} from \"reactstrap\";\nimport Select from \"react-select\";\nimport { useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst ViewPurchase = () => {\n  const [showSubmitLoader, setShowSubmitLoader] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const [errorText, setErrorText] = useState(null);\n  const [billImage, setBillImage] = useState(\"\");\n  const [initialTasks, setInitialTask] = useState({\n    sellerName: \"\",\n    sellerContact: [],\n    purchaseDescription: \"\",\n    billAmount: \"\",\n    paidAmount: \"\",\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const loadData = async () => {\n    try {\n      const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n      const { data } = await axios.get(`${API_URL}/purchases/${_id}`, {\n        headers: {\n          Authorization: token,\n        },\n      });\n\n      setInitialTask(data);\n      setBillImage(data?.billImage);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // const onSubmit = async (value) => {\n  //   try {\n  //     const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n  //     await axios.put(`${API_URL}/products/${_id}`, value, {\n  //       headers: {\n  //         Authorization: token,\n  //       },\n  //     });\n  //     history.push(\"/Products\");\n  //     toast(\"Update Successfully\");\n  //   } catch (e) {\n  //     console.log(e);\n  //   }\n  // };\n\n  if (showLoader) return <Loader />;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>View Product</CardTitle>\n      </CardHeader>\n      <hr />\n      <CardBody>\n        <Formik\n          enableReinitialize={true}\n          initialValues={initialTasks}\n          validationSchema={Yup.object().shape({\n            sellerName: Yup.string().required(),\n            sellerContact: Yup.string().required(),\n            purchaseDescription: Yup.string().required(),\n            billAmount: Yup.string().required(),\n            paidAmount: Yup.string().required(),\n          })}\n          // onSubmit={(values) => {\n          //   onSubmit(values);\n          // }}\n        >\n          {(props) => {\n            const {\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n            } = props;\n            console.log(errors);\n            return (\n              <>\n                <Row>\n                  <Col md=\"3\"></Col>\n                  <Col md=\"5\">\n                    {errorText && (\n                      <UncontrolledAlert color=\"danger\">\n                        {errorText}\n                      </UncontrolledAlert>\n                    )}\n                  </Col>\n                </Row>\n                <Form onSubmit={handleSubmit}>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Seller Name</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.sellerName} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Seller Contact No.</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <FieldArray name=\"storeMobile\">\n                        {(fieldArrayProps) => {\n                          const { push, remove, form } = fieldArrayProps;\n                          return (\n                            <>\n                              <Row>\n                                {values.sellerContact.map((element, index) => (\n                                  <Fragment key={index}>\n                                    <Col md=\"5\" className=\"text-center\">\n                                      <FormGroup>\n                                        <Input value={element} />\n                                      </FormGroup>\n                                    </Col>\n                                    <Col md=\"3\">\n                                      <Button\n                                        outline\n                                        style={{ color: \"red\" }}\n                                        onClick={() => remove(index)}\n                                      >\n                                        Remove\n                                      </Button>\n                                    </Col>\n                                  </Fragment>\n                                ))}\n                                <Col md=\"12\">\n                                  <Button\n                                    style={{ color: \"green\" }}\n                                    outline\n                                    onClick={() => push()}\n                                  >\n                                    Add\n                                  </Button>\n                                </Col>\n                              </Row>\n                            </>\n                          );\n                        }}\n                      </FieldArray>\n                      {touched.storeMobile && errors.storeMobile && (\n                        <div className=\"invalid-feedback\">\n                          {errors.storeMobile}\n                        </div>\n                      )}\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Purchase Detail</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input\n                        type=\"textarea\"\n                        value={values.purchaseDescription}\n                      />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Bill Amount</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.billAmount} />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Paid Amount</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <Input value={values.paidAmount} />\n                    </Col>\n                  </FormGroup>\n\n                  <FormGroup row>\n                    <Col md=\"3\" className=\"text-center\">\n                      <span>Bill Image</span>\n                    </Col>\n                    <Col md=\"5\">\n                      <img\n                        style={{ width: 100, height: 100 }}\n                        src={values.billImage}\n                      />\n                    </Col>\n                  </FormGroup>\n                  <Row>\n                    <Col md=\"3\"></Col>\n                    <Col md=\"5\">\n                      <Button\n                        color=\"secondary\"\n                        outline\n                        onClick={() => history.goBack()}\n                      >\n                        Cancel\n                      </Button>\n                    </Col>\n                  </Row>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default ViewPurchase;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/viewPdfDetail.js",["671","672","673","674","675","676"],"// import React, { useEffect, useState } from \"react\";\n// import generatePDF from \"./generatePdf\";\n// import { API_URL } from \"../../configs/constant\";\n// import { TOKEN_KEY } from \"../../configs/constant\";\n// import axios from \"axios\";\n// import { useParams, useHistory } from \"react-router-dom\";\n// import InvoiceComponent from \"./invoiceTable\";\n\n// const Invoice = () => {\n//   const [invoices, setInvoices] = useState([]);\n\n//   useEffect(() => {\n//     const getInvoice = async () => {\n//       try {\n//         const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n//         const response = await axios.get(`${API_URL}/sells/invoice/${_id}`, {\n//           headers: {\n//             Authorization: token,\n//           },\n//         });\n//         console.log(\"Invoice response:\", response)\n//         setInvoices(response.data);\n//       } catch (err) {\n//         console.log(\"error\", err);\n//       }\n//     };\n//     getInvoice();\n//   }, []);\n\n//   const { _id } = useParams();\n//   let history = useHistory();\n//   console.log(\"id\", _id);\n\n//   // const reportTickets = tickets.filter(ticket => ticket.status === \"completed\");\n// console.log(\"Invoice at viewPDF:\",invoices);\n//   return (\n\n//     <div>\n//       <div className=\"container mb-4 mt-4 p-3\">\n//         <div className=\"row\">\n//           <button className=\"btn btn-primary\" onClick={() => generatePDF()}>\n//             Generate\n//           </button>\n//         </div>\n//       </div>\n//       <InvoiceComponent invoices={invoices} />\n//     </div>\n//   );\n// };\n\n// export default Invoice;\n//-------------------------------------------------------------------------------------------\nimport React, { useState, useEffect } from \"react\";\nimport { Page, Text, View, Document, StyleSheet } from \"@react-pdf/renderer\";\nimport { SalesService } from \"../../services/api.service\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { PDFViewer } from \"@react-pdf/renderer\";\nimport ReactPDF from \"@react-pdf/renderer\";\nimport ReactDOM from \"@react-pdf/renderer\";\nconst ViewPdf = () => {\n  const styles = StyleSheet.create({\n    body: {\n        paddingTop: 35,\n        paddingBottom: 65,\n        paddingHorizontal: 35,\n      },\n      title: {\n        fontSize: 24,\n        textAlign: 'center',\n        fontFamily: 'Oswald'\n      },\n      author: {\n        fontSize: 12,\n        textAlign: 'center',\n        marginBottom: 40,\n      },\n      subtitle: {\n        fontSize: 18,\n        margin: 12,\n        fontFamily: 'Oswald'\n      },\n      text: {\n        margin: 12,\n        fontSize: 14,\n        textAlign: 'justify',\n        fontFamily: 'Times-Roman'\n      },\n      image: {\n        marginVertical: 15,\n        marginHorizontal: 100,\n      },\n      header: {\n        fontSize: 12,\n        marginBottom: 20,\n        textAlign: 'center',\n        color: 'grey',\n      },\n      pageNumber: {\n        position: 'absolute',\n        fontSize: 12,\n        bottom: 30,\n        left: 0,\n        right: 0,\n        textAlign: 'center',\n        color: 'grey',\n      },\n    });\n\n  useEffect(() => {\n    invoiceList();\n  }, []);\n\n  const { _id } = useParams();\n  let history = useHistory();\n  console.log(\"id\", _id);\n\n  const [dataList, setDataList] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const invoiceList = async (d) => {\n    setShowLoader(true);\n    try {\n      const data = await SalesService.getInvoiceList(_id);\n      setDataList(data);\n      console.log(\"DataList\", data);\n    } catch (ex) {\n      toast.error(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const MyDocument = () => (\n    <Document>\n      <Page size=\"A4\" style={styles.page}>\n        {/* <View style={styles.section}> */}\n          <Text style={styles.section}>{dataList._id}</Text>\n        {/* </View> */}\n        {/* <View style={styles.section}> */}\n          <Text style={styles.section}>{dataList.customerName}</Text>\n        {/* </View> */}\n      </Page>\n    </Document>\n\n  );\n\n  return (\n    <PDFViewer>\n     <MyDocument />\n     </PDFViewer>\n\n  )\n\n};\n\nexport default ViewPdf;\n//--------------------------------------------------------------------------------------------------\n// import { useEffect, useState } from \"react\";\n// import { useParams, Link } from \"react-router-dom\";\n\n// // ** Third Party Components\n// import axios from \"axios\";\n// import { Row, Col, Alert } from \"reactstrap\";\n// import { API_URL } from \"../../configs/constant\";\n// import { TOKEN_KEY } from \"../../configs/constant\";\n\n// // ** Invoice Preview Components\n// import PreviewCard from \"./invoiceCard\";\n// // import PreviewActions from './PreviewActions'\n// // import SendInvoiceSidebar from '../shared-sidebar/SidebarSendInvoice'\n// // import AddPaymentSidebar from '../shared-sidebar/SidebarAddPayment'\n\n// // ** Styles\n// // import '../../scss/base/pages/app-invoice.scss'\n\n// const InvoicePreview = () => {\n//   // ** Vars\n//   const { _id } = useParams();\n\n//   // ** States\n//   const [data, setData] = useState(null);\n//   const [sendSidebarOpen, setSendSidebarOpen] = useState(false);\n//   const [addPaymentOpen, setAddPaymentOpen] = useState(false);\n\n//   // ** Functions to toggle add & send sidebar\n//   const toggleSendSidebar = () => setSendSidebarOpen(!sendSidebarOpen);\n//   const toggleAddSidebar = () => setAddPaymentOpen(!addPaymentOpen);\n\n//   // ** Get invoice on mount based on id\n//   useEffect(() => {\n//     loadData();\n//   }, []);\n\n//   const loadData = async () => {\n//     try {\n//       const token = `Bearer ${localStorage.getItem(TOKEN_KEY)}`;\n//       const { data } = await axios.get(`${API_URL}/sells/invoice/${_id}`, {\n//         headers: {\n//           Authorization: token,\n//         },\n//       });\n//       console.log(data);\n//       setData(data);\n//       console.log(\"datas\", data);\n//     } catch (e) {\n//       console.log(e);\n//     }\n//   };\n\n//   return data !== null && data.invoice !== undefined ? (\n//     <div className=\"invoice-preview-wrapper\">\n//       <Row className=\"invoice-preview\">\n//         <Col xl={9} md={8} sm={12}>\n//           <PreviewCard data={data} />\n//         </Col>\n//         {/* <Col xl={3} md={4} sm={12}>\n//           <PreviewActions id={id} setSendSidebarOpen={setSendSidebarOpen} setAddPaymentOpen={setAddPaymentOpen} />\n//         </Col> */}\n//       </Row>\n//       {/* <SendInvoiceSidebar toggleSidebar={toggleSendSidebar} open={sendSidebarOpen} />\n//       <AddPaymentSidebar toggleSidebar={toggleAddSidebar} open={addPaymentOpen} /> */}\n//     </div>\n//   ) : (\n//     <Alert color=\"danger\">\n//       <h4 className=\"alert-heading\">Invoice not found</h4>\n//       <div className=\"alert-body\">\n//         Invoice with id: {_id} doesn't exist. Check list of\n//         all invoices: <Link to=\"/invoice/list\">Invoice List</Link>\n//       </div>\n//     </Alert>\n//   );\n// };\n\n// export default InvoicePreview;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/generatePdf.js",["677"],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/Seller/invoiceCard.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/sellCount.js",["678","679"],"import React, { useState, useEffect } from \"react\";\nimport { DashBoard } from \"../services/api.service\";\nimport { Card, CardBody, Col, Row, Button } from \"reactstrap\";\n\nconst SellCounts = () => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [dataList, setDataList] = useState([]);\n\n  useEffect(() => {\n    SaleCount();\n  }, []);\n\n  const SaleCount = async () => {\n    //   setShowLoader(true);\n    try {\n      const data = await DashBoard.getSaleCount();\n      console.log(data);\n      setDataList(data);\n      console.log(dataList);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  return (\n    <>\n      <div id=\"dashboard-analytics\">\n        <Row className=\"match-height\">\n          <Col lg=\"2\">\n            <Card>\n              <CardBody className=\"pb-0\">\n              <p className=\"card-text\">*Total Sale Count*</p>\n                  <h5\n                    className=\"font-weight-bolder\"\n                    style={{ color: \"rgb(137,128,242)\" }}\n                  >No. of Count:&nbsp;\n                    {showLoader ? <CardBody size={8} /> : dataList.count}\n                  </h5>\n                  <h5\n                    className=\"font-weight-bolder\"\n                    style={{ color: \"rgb(137,128,242)\" }}\n                  > Total Amount:&nbsp;\n                    {showLoader ? <CardBody size={8} /> : dataList.totalSellAmount}\n                  </h5>\n                {/* <Edit\n                  size={18}\n                  className=\"cursor-pointer\"\n                  color={\"rgb(137,128,242)\"}\n                  onClick={() => {\n                    history.push(`/EditCategory/${element._id}`);\n                  }}\n                />\n                &nbsp;\n                <Trash\n                  size={18}\n                  color={\"red\"}\n                  className=\"cursor-pointer\"\n                  onClick={() => {\n                    onDeleteRecord(element._id);\n                    setDeleteID(index);\n                  }}\n                />{\" \"}\n                &nbsp;\n                <Eye\n                  size={18}\n                  className=\"cursor-pointer\"\n                  color={\"rgb(137,128,242)\"}\n                  onClick={() => {\n                    history.push(`/ViewCategory/${element._id}`);\n                  }}\n                /> */}\n              </CardBody>\n              \n            </Card>\n          </Col>\n        </Row>\n        \n        {/* <Row>\n          <Col md=\"2\"></Col>\n          <Col md=\"5\">\n            <Button\n              className=\"mr-3\"\n              color=\"primary\"\n              onClick={() => history.push(\"/AddCategory\")}\n            >\n              Add Category\n            </Button>\n            <Button color=\"secondary\" outline onClick={() => history.goBack()}>\n              Cancel\n            </Button>\n          </Col>\n        </Row> */}\n      </div>\n    </>\n  );\n};\n\nexport default SellCounts;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/productCount.js",["680","681"],"import React, { useState, useEffect } from \"react\";\nimport { DashBoard } from \"../services/api.service\";\nimport { Card, CardBody, Col, Row, Button } from \"reactstrap\";\n\nconst ProductCounts = () => {\n  const [showLoader, setShowLoader] = useState(false);\n  const [dataList, setDataList] = useState([]);\n\n  useEffect(() => {\n    ProductCount();\n  }, []);\n\n  const ProductCount = async () => {\n    //   setShowLoader(true);\n    try {\n      const data = await DashBoard.getProductCount();\n      console.log(data);\n      setDataList(data);\n      console.log(dataList);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  return (\n    <>\n      <div id=\"dashboard-analytics\">\n        <Row className=\"match-height\">\n          <Col lg=\"2\">\n            <Card>\n              <CardBody className=\"pb-0\">\n              <p className=\"card-text\">*Total Product Count*</p>\n                  <h5\n                    className=\"font-weight-bolder\"\n                    style={{ color: \"rgb(137,128,242)\" }}\n                  >Avail Products:&nbsp;\n                    {showLoader ? <CardBody size={8} /> : dataList.count}\n                  </h5>\n                  <h5\n                    className=\"font-weight-bolder\"\n                    style={{ color: \"rgb(137,128,242)\" }}\n                  > Total Product Amount:&nbsp;\n                    {showLoader ? <CardBody size={8} /> : dataList.totalProductAmount}\n                  </h5>\n                {/* <Edit\n                  size={18}\n                  className=\"cursor-pointer\"\n                  color={\"rgb(137,128,242)\"}\n                  onClick={() => {\n                    history.push(`/EditCategory/${element._id}`);\n                  }}\n                />\n                &nbsp;\n                <Trash\n                  size={18}\n                  color={\"red\"}\n                  className=\"cursor-pointer\"\n                  onClick={() => {\n                    onDeleteRecord(element._id);\n                    setDeleteID(index);\n                  }}\n                />{\" \"}\n                &nbsp;\n                <Eye\n                  size={18}\n                  className=\"cursor-pointer\"\n                  color={\"rgb(137,128,242)\"}\n                  onClick={() => {\n                    history.push(`/ViewCategory/${element._id}`);\n                  }}\n                /> */}\n              </CardBody>\n              \n            </Card>\n          </Col>\n        </Row>\n        \n        {/* <Row>\n          <Col md=\"2\"></Col>\n          <Col md=\"5\">\n            <Button\n              className=\"mr-3\"\n              color=\"primary\"\n              onClick={() => history.push(\"/AddCategory\")}\n            >\n              Add Category\n            </Button>\n            <Button color=\"secondary\" outline onClick={() => history.goBack()}>\n              Cancel\n            </Button>\n          </Col>\n        </Row> */}\n      </div>\n    </>\n  );\n};\n\nexport default ProductCounts;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/views/ui-elements/cards/statistics/RevenueGenerated.js",["682","683","684","685","686","687"],"/home/upstrapp-006/Desktop/inventory_system_admin/src/components/widgets/stats/StatsWithAreaChart.js",[],["688","689"],"/home/upstrapp-006/Desktop/inventory_system_admin/src/components/widgets/stats/ChartOptions.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/components/widgets/avatar/index.js",[],"/home/upstrapp-006/Desktop/inventory_system_admin/src/views/ui-elements/cards/statistics/StatsCard.js",["690","691"],"import classnames from \"classnames\";\nimport Avatar from \"../../../../components/widgets/avatar/index\";\nimport { TrendingUp, User, Box, DollarSign } from \"react-feather\";\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  CardText,\n  Row,\n  Col,\n  Media,\n} from \"reactstrap\";\nimport { DashBoard } from \"../../../../services/api.service\";\nimport React, { useState, useEffect } from \"react\";\n\nconst StatsCard = ({ cols }) => {\n  const [dataList, setDataList] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n  const [initialTask, setInitialTask] = useState([])\n  const [complaintData, setComplaintData] = useState([])\n  const [purchaseCount,setPurchaseCount] = useState([])\n\n  const SaleCount = async () => {\n    try {\n      const datas = await DashBoard.getSaleCount();\n      console.log(datas);\n      setDataList(datas);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const ProductCount = async () => {\n    \n    try {\n      const datap = await DashBoard.getProductCount();\n      console.log(datap);\n      setInitialTask(datap);\n      // console.log(initialTask);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const ComplaintCount = async () => {\n    \n    try {\n      const datac = await DashBoard.getComplaintCount();\n      console.log(datac);\n      setComplaintData(datac);\n      console.log(complaintData);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  const PurchaseCount = async () => {\n    \n    try {\n      const datapc = await DashBoard.getPurchaseCount();\n      console.log(datapc);\n      setPurchaseCount(datapc);\n      console.log(purchaseCount);\n    } catch (ex) {\n      console.log(ex);\n    } finally {\n      setShowLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    SaleCount();\n    ProductCount();\n    ComplaintCount();\n    PurchaseCount();\n  }, []);\n\n  const data = [\n    {\n      title: dataList.count,\n      subtitle: 'Total Count',\n      title1: dataList.totalSellAmount,\n      subtitle1:'Total Amount',\n      color: 'light-primary',\n      icon: <TrendingUp size={24}/>\n    },\n    {\n      title: initialTask.count,\n      subtitle: 'Total Product Count',\n      color: 'light-info',\n      icon: <User size={24} />\n    },\n    {\n      title: complaintData.Pending,\n      subtitle: 'Pending Complaints',\n      title1: complaintData.Resolved,\n      subtitle1: 'Resolved Complaints',\n      color: 'light-danger',\n      icon: <Box size={24} />\n      \n    },\n    {\n      title: purchaseCount.count,\n      subtitle: 'Total Purchase Count',\n      title1: purchaseCount.totalPaidAmount,\n      subtitle1: 'Total Paid Amount',\n      title2: purchaseCount.totalPurchaseAmount,\n      subtitle2: 'Total Purchase Amount',\n      color: 'light-success',\n      icon: <DollarSign size={24} />\n    }\n  ]\n  \n\n  const renderData = () => {\n    <SaleCount />\n   \n    return data.map((item, index) => {\n      const margin = Object.keys({ cols });\n      return (\n        <Col\n          key={index}\n          {...cols}\n          className={classnames({\n            [`mb-2 mb-${margin[0]}-0`]: index !== data.length - 1,\n          })}\n        >\n          <Media>\n            <Avatar color={item.color} icon={item.icon} className=\"mr-2\" />\n            <Media className=\"my-auto\" body>\n              <h4 className=\"font-weight-bolder mb-0\">{item.title}</h4>\n              <CardText className=\"font-small-3 mb-0\">{item.subtitle}</CardText>\n              <h4 className=\"font-weight-bolder mb-0\">{item.title1}</h4>\n              <CardText className=\"font-small-3 mb-0\">{item.subtitle1}</CardText>\n              <h4 className=\"font-weight-bolder mb-0\">{item.title2}</h4>\n              <CardText className=\"font-small-3 mb-0\">{item.subtitle2}</CardText>\n              \n            </Media>\n          </Media>\n        </Col>\n      );\n    });\n  };\n\n  return (\n    <Card className=\"card-statistics\">\n      <CardHeader>\n        <CardTitle tag=\"h4\">Statistics</CardTitle>\n        <CardText className=\"card-text font-small-2 mr-25 mb-0\">\n          \n        </CardText>\n      </CardHeader>\n      <CardBody className=\"statistics-body\">\n        <Row>{renderData()}</Row>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default StatsCard;\n","/home/upstrapp-006/Desktop/inventory_system_admin/src/components/avatar/AvatarComponent.js",[],{"ruleId":"692","severity":1,"message":"693","line":11,"column":10,"nodeType":"694","messageId":"695","endLine":11,"endColumn":19},{"ruleId":"696","replacedBy":"697"},{"ruleId":"698","replacedBy":"699"},{"ruleId":"692","severity":1,"message":"700","line":2,"column":8,"nodeType":"694","messageId":"695","endLine":2,"endColumn":22},{"ruleId":"692","severity":1,"message":"701","line":14,"column":8,"nodeType":"694","messageId":"695","endLine":14,"endColumn":16},{"ruleId":"692","severity":1,"message":"693","line":15,"column":10,"nodeType":"694","messageId":"695","endLine":15,"endColumn":19},{"ruleId":"692","severity":1,"message":"702","line":16,"column":8,"nodeType":"694","messageId":"695","endLine":16,"endColumn":18},{"ruleId":"703","severity":1,"message":"704","line":25,"column":6,"nodeType":"705","endLine":25,"endColumn":8,"suggestions":"706"},{"ruleId":"692","severity":1,"message":"707","line":5,"column":8,"nodeType":"694","messageId":"695","endLine":5,"endColumn":17},{"ruleId":"692","severity":1,"message":"708","line":2,"column":8,"nodeType":"694","messageId":"695","endLine":2,"endColumn":16},{"ruleId":"692","severity":1,"message":"709","line":3,"column":8,"nodeType":"694","messageId":"695","endLine":3,"endColumn":18},{"ruleId":"692","severity":1,"message":"710","line":4,"column":8,"nodeType":"694","messageId":"695","endLine":4,"endColumn":21},{"ruleId":"692","severity":1,"message":"711","line":1,"column":27,"nodeType":"694","messageId":"695","endLine":1,"endColumn":36},{"ruleId":"692","severity":1,"message":"700","line":3,"column":8,"nodeType":"694","messageId":"695","endLine":3,"endColumn":22},{"ruleId":"692","severity":1,"message":"712","line":1,"column":27,"nodeType":"694","messageId":"695","endLine":1,"endColumn":33},{"ruleId":"692","severity":1,"message":"713","line":2,"column":10,"nodeType":"694","messageId":"695","endLine":2,"endColumn":17},{"ruleId":"692","severity":1,"message":"714","line":17,"column":22,"nodeType":"694","messageId":"695","endLine":17,"endColumn":27},{"ruleId":"692","severity":1,"message":"715","line":17,"column":29,"nodeType":"694","messageId":"695","endLine":17,"endColumn":34},{"ruleId":"692","severity":1,"message":"716","line":17,"column":42,"nodeType":"694","messageId":"695","endLine":17,"endColumn":50},{"ruleId":"692","severity":1,"message":"717","line":18,"column":8,"nodeType":"694","messageId":"695","endLine":18,"endColumn":16},{"ruleId":"692","severity":1,"message":"718","line":21,"column":10,"nodeType":"694","messageId":"695","endLine":21,"endColumn":19},{"ruleId":"692","severity":1,"message":"719","line":26,"column":8,"nodeType":"694","messageId":"695","endLine":26,"endColumn":14},{"ruleId":"692","severity":1,"message":"720","line":30,"column":9,"nodeType":"694","messageId":"695","endLine":30,"endColumn":17},{"ruleId":"692","severity":1,"message":"721","line":34,"column":22,"nodeType":"694","messageId":"695","endLine":34,"endColumn":35},{"ruleId":"692","severity":1,"message":"722","line":7,"column":18,"nodeType":"694","messageId":"695","endLine":7,"endColumn":25},{"ruleId":"692","severity":1,"message":"713","line":7,"column":27,"nodeType":"694","messageId":"695","endLine":7,"endColumn":34},{"ruleId":"692","severity":1,"message":"723","line":15,"column":10,"nodeType":"694","messageId":"695","endLine":15,"endColumn":13},{"ruleId":"692","severity":1,"message":"724","line":15,"column":15,"nodeType":"694","messageId":"695","endLine":15,"endColumn":19},{"ruleId":"692","severity":1,"message":"725","line":19,"column":9,"nodeType":"694","messageId":"695","endLine":19,"endColumn":15},{"ruleId":"692","severity":1,"message":"726","line":20,"column":9,"nodeType":"694","messageId":"695","endLine":20,"endColumn":14},{"ruleId":"692","severity":1,"message":"727","line":32,"column":9,"nodeType":"694","messageId":"695","endLine":32,"endColumn":25},{"ruleId":"692","severity":1,"message":"725","line":91,"column":11,"nodeType":"694","messageId":"695","endLine":91,"endColumn":17},{"ruleId":"692","severity":1,"message":"728","line":16,"column":10,"nodeType":"694","messageId":"695","endLine":16,"endColumn":17},{"ruleId":"692","severity":1,"message":"729","line":17,"column":10,"nodeType":"694","messageId":"695","endLine":17,"endColumn":21},{"ruleId":"692","severity":1,"message":"730","line":21,"column":20,"nodeType":"694","messageId":"695","endLine":21,"endColumn":25},{"ruleId":"703","severity":1,"message":"731","line":27,"column":6,"nodeType":"705","endLine":27,"endColumn":8,"suggestions":"732"},{"ruleId":"692","severity":1,"message":"733","line":15,"column":3,"nodeType":"694","messageId":"695","endLine":15,"endColumn":14},{"ruleId":"692","severity":1,"message":"734","line":27,"column":28,"nodeType":"694","messageId":"695","endLine":27,"endColumn":47},{"ruleId":"692","severity":1,"message":"735","line":29,"column":21,"nodeType":"694","messageId":"695","endLine":29,"endColumn":33},{"ruleId":"692","severity":1,"message":"736","line":30,"column":9,"nodeType":"694","messageId":"695","endLine":30,"endColumn":21},{"ruleId":"692","severity":1,"message":"737","line":31,"column":22,"nodeType":"694","messageId":"695","endLine":31,"endColumn":35},{"ruleId":"692","severity":1,"message":"738","line":34,"column":22,"nodeType":"694","messageId":"695","endLine":34,"endColumn":35},{"ruleId":"692","severity":1,"message":"711","line":1,"column":17,"nodeType":"694","messageId":"695","endLine":1,"endColumn":26},{"ruleId":"692","severity":1,"message":"712","line":1,"column":38,"nodeType":"694","messageId":"695","endLine":1,"endColumn":44},{"ruleId":"692","severity":1,"message":"728","line":19,"column":10,"nodeType":"694","messageId":"695","endLine":19,"endColumn":17},{"ruleId":"692","severity":1,"message":"729","line":21,"column":10,"nodeType":"694","messageId":"695","endLine":21,"endColumn":21},{"ruleId":"692","severity":1,"message":"718","line":22,"column":10,"nodeType":"694","messageId":"695","endLine":22,"endColumn":19},{"ruleId":"692","severity":1,"message":"739","line":22,"column":21,"nodeType":"694","messageId":"695","endLine":22,"endColumn":28},{"ruleId":"692","severity":1,"message":"740","line":23,"column":10,"nodeType":"694","messageId":"695","endLine":23,"endColumn":15},{"ruleId":"692","severity":1,"message":"738","line":27,"column":22,"nodeType":"694","messageId":"695","endLine":27,"endColumn":35},{"ruleId":"692","severity":1,"message":"737","line":33,"column":22,"nodeType":"694","messageId":"695","endLine":33,"endColumn":35},{"ruleId":"692","severity":1,"message":"730","line":34,"column":20,"nodeType":"694","messageId":"695","endLine":34,"endColumn":25},{"ruleId":"692","severity":1,"message":"735","line":36,"column":21,"nodeType":"694","messageId":"695","endLine":36,"endColumn":33},{"ruleId":"692","severity":1,"message":"741","line":7,"column":10,"nodeType":"694","messageId":"695","endLine":7,"endColumn":20},{"ruleId":"692","severity":1,"message":"737","line":7,"column":22,"nodeType":"694","messageId":"695","endLine":7,"endColumn":35},{"ruleId":"692","severity":1,"message":"711","line":1,"column":27,"nodeType":"694","messageId":"695","endLine":1,"endColumn":36},{"ruleId":"692","severity":1,"message":"741","line":8,"column":10,"nodeType":"694","messageId":"695","endLine":8,"endColumn":20},{"ruleId":"692","severity":1,"message":"737","line":8,"column":22,"nodeType":"694","messageId":"695","endLine":8,"endColumn":35},{"ruleId":"692","severity":1,"message":"742","line":9,"column":20,"nodeType":"694","messageId":"695","endLine":9,"endColumn":31},{"ruleId":"692","severity":1,"message":"711","line":1,"column":27,"nodeType":"694","messageId":"695","endLine":1,"endColumn":36},{"ruleId":"692","severity":1,"message":"743","line":2,"column":36,"nodeType":"694","messageId":"695","endLine":2,"endColumn":42},{"ruleId":"692","severity":1,"message":"728","line":3,"column":10,"nodeType":"694","messageId":"695","endLine":3,"endColumn":17},{"ruleId":"692","severity":1,"message":"741","line":7,"column":10,"nodeType":"694","messageId":"695","endLine":7,"endColumn":20},{"ruleId":"692","severity":1,"message":"737","line":7,"column":22,"nodeType":"694","messageId":"695","endLine":7,"endColumn":35},{"ruleId":"692","severity":1,"message":"742","line":8,"column":20,"nodeType":"694","messageId":"695","endLine":8,"endColumn":31},{"ruleId":"692","severity":1,"message":"744","line":18,"column":3,"nodeType":"694","messageId":"695","endLine":18,"endColumn":16},{"ruleId":"692","severity":1,"message":"719","line":24,"column":8,"nodeType":"694","messageId":"695","endLine":24,"endColumn":14},{"ruleId":"692","severity":1,"message":"745","line":25,"column":10,"nodeType":"694","messageId":"695","endLine":25,"endColumn":14},{"ruleId":"692","severity":1,"message":"746","line":32,"column":10,"nodeType":"694","messageId":"695","endLine":32,"endColumn":25},{"ruleId":"692","severity":1,"message":"747","line":33,"column":23,"nodeType":"694","messageId":"695","endLine":33,"endColumn":37},{"ruleId":"692","severity":1,"message":"748","line":34,"column":10,"nodeType":"694","messageId":"695","endLine":34,"endColumn":19},{"ruleId":"692","severity":1,"message":"749","line":34,"column":21,"nodeType":"694","messageId":"695","endLine":34,"endColumn":33},{"ruleId":"703","severity":1,"message":"750","line":41,"column":6,"nodeType":"705","endLine":41,"endColumn":8,"suggestions":"751"},{"ruleId":"692","severity":1,"message":"711","line":1,"column":17,"nodeType":"694","messageId":"695","endLine":1,"endColumn":26},{"ruleId":"692","severity":1,"message":"733","line":15,"column":3,"nodeType":"694","messageId":"695","endLine":15,"endColumn":14},{"ruleId":"692","severity":1,"message":"719","line":21,"column":8,"nodeType":"694","messageId":"695","endLine":21,"endColumn":14},{"ruleId":"692","severity":1,"message":"740","line":22,"column":8,"nodeType":"694","messageId":"695","endLine":22,"endColumn":13},{"ruleId":"692","severity":1,"message":"734","line":27,"column":28,"nodeType":"694","messageId":"695","endLine":27,"endColumn":47},{"ruleId":"692","severity":1,"message":"730","line":28,"column":20,"nodeType":"694","messageId":"695","endLine":28,"endColumn":25},{"ruleId":"692","severity":1,"message":"736","line":30,"column":9,"nodeType":"694","messageId":"695","endLine":30,"endColumn":21},{"ruleId":"692","severity":1,"message":"738","line":32,"column":22,"nodeType":"694","messageId":"695","endLine":32,"endColumn":35},{"ruleId":"692","severity":1,"message":"711","line":1,"column":17,"nodeType":"694","messageId":"695","endLine":1,"endColumn":26},{"ruleId":"692","severity":1,"message":"733","line":15,"column":3,"nodeType":"694","messageId":"695","endLine":15,"endColumn":14},{"ruleId":"692","severity":1,"message":"729","line":20,"column":10,"nodeType":"694","messageId":"695","endLine":20,"endColumn":21},{"ruleId":"692","severity":1,"message":"719","line":21,"column":8,"nodeType":"694","messageId":"695","endLine":21,"endColumn":14},{"ruleId":"692","severity":1,"message":"740","line":22,"column":8,"nodeType":"694","messageId":"695","endLine":22,"endColumn":13},{"ruleId":"692","severity":1,"message":"739","line":23,"column":10,"nodeType":"694","messageId":"695","endLine":23,"endColumn":17},{"ruleId":"692","severity":1,"message":"718","line":23,"column":19,"nodeType":"694","messageId":"695","endLine":23,"endColumn":28},{"ruleId":"692","severity":1,"message":"752","line":28,"column":10,"nodeType":"694","messageId":"695","endLine":28,"endColumn":15},{"ruleId":"692","severity":1,"message":"753","line":29,"column":10,"nodeType":"694","messageId":"695","endLine":29,"endColumn":22},{"ruleId":"692","severity":1,"message":"734","line":30,"column":28,"nodeType":"694","messageId":"695","endLine":30,"endColumn":47},{"ruleId":"692","severity":1,"message":"736","line":33,"column":9,"nodeType":"694","messageId":"695","endLine":33,"endColumn":21},{"ruleId":"692","severity":1,"message":"738","line":35,"column":22,"nodeType":"694","messageId":"695","endLine":35,"endColumn":35},{"ruleId":"692","severity":1,"message":"754","line":70,"column":9,"nodeType":"694","messageId":"695","endLine":70,"endColumn":21},{"ruleId":"692","severity":1,"message":"755","line":86,"column":9,"nodeType":"694","messageId":"695","endLine":86,"endColumn":21},{"ruleId":"692","severity":1,"message":"733","line":15,"column":3,"nodeType":"694","messageId":"695","endLine":15,"endColumn":14},{"ruleId":"692","severity":1,"message":"753","line":28,"column":10,"nodeType":"694","messageId":"695","endLine":28,"endColumn":22},{"ruleId":"692","severity":1,"message":"734","line":29,"column":28,"nodeType":"694","messageId":"695","endLine":29,"endColumn":47},{"ruleId":"692","severity":1,"message":"735","line":31,"column":21,"nodeType":"694","messageId":"695","endLine":31,"endColumn":33},{"ruleId":"692","severity":1,"message":"736","line":32,"column":9,"nodeType":"694","messageId":"695","endLine":32,"endColumn":21},{"ruleId":"692","severity":1,"message":"737","line":33,"column":22,"nodeType":"694","messageId":"695","endLine":33,"endColumn":35},{"ruleId":"692","severity":1,"message":"738","line":36,"column":22,"nodeType":"694","messageId":"695","endLine":36,"endColumn":35},{"ruleId":"703","severity":1,"message":"756","line":51,"column":6,"nodeType":"705","endLine":51,"endColumn":8,"suggestions":"757"},{"ruleId":"692","severity":1,"message":"754","line":75,"column":9,"nodeType":"694","messageId":"695","endLine":75,"endColumn":21},{"ruleId":"692","severity":1,"message":"755","line":91,"column":9,"nodeType":"694","messageId":"695","endLine":91,"endColumn":21},{"ruleId":"692","severity":1,"message":"758","line":28,"column":10,"nodeType":"694","messageId":"695","endLine":28,"endColumn":21},{"ruleId":"692","severity":1,"message":"747","line":28,"column":23,"nodeType":"694","messageId":"695","endLine":28,"endColumn":37},{"ruleId":"692","severity":1,"message":"748","line":29,"column":10,"nodeType":"694","messageId":"695","endLine":29,"endColumn":19},{"ruleId":"692","severity":1,"message":"749","line":29,"column":21,"nodeType":"694","messageId":"695","endLine":29,"endColumn":33},{"ruleId":"692","severity":1,"message":"746","line":34,"column":10,"nodeType":"694","messageId":"695","endLine":34,"endColumn":25},{"ruleId":"703","severity":1,"message":"759","line":38,"column":6,"nodeType":"705","endLine":38,"endColumn":8,"suggestions":"760"},{"ruleId":"761","severity":1,"message":"762","line":96,"column":11,"nodeType":"763","endLine":96,"endColumn":76},{"ruleId":"692","severity":1,"message":"753","line":24,"column":10,"nodeType":"694","messageId":"695","endLine":24,"endColumn":22},{"ruleId":"692","severity":1,"message":"734","line":25,"column":28,"nodeType":"694","messageId":"695","endLine":25,"endColumn":47},{"ruleId":"692","severity":1,"message":"730","line":26,"column":20,"nodeType":"694","messageId":"695","endLine":26,"endColumn":25},{"ruleId":"692","severity":1,"message":"738","line":30,"column":22,"nodeType":"694","messageId":"695","endLine":30,"endColumn":35},{"ruleId":"692","severity":1,"message":"764","line":152,"column":49,"nodeType":"694","messageId":"695","endLine":152,"endColumn":53},{"ruleId":"692","severity":1,"message":"734","line":28,"column":28,"nodeType":"694","messageId":"695","endLine":28,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":29,"column":22,"nodeType":"694","messageId":"695","endLine":29,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":30,"column":21,"nodeType":"694","messageId":"695","endLine":30,"endColumn":33},{"ruleId":"692","severity":1,"message":"753","line":32,"column":10,"nodeType":"694","messageId":"695","endLine":32,"endColumn":22},{"ruleId":"703","severity":1,"message":"765","line":45,"column":6,"nodeType":"705","endLine":45,"endColumn":8,"suggestions":"766"},{"ruleId":"692","severity":1,"message":"764","line":182,"column":49,"nodeType":"694","messageId":"695","endLine":182,"endColumn":53},{"ruleId":"692","severity":1,"message":"767","line":7,"column":8,"nodeType":"694","messageId":"695","endLine":7,"endColumn":14},{"ruleId":"692","severity":1,"message":"768","line":8,"column":10,"nodeType":"694","messageId":"695","endLine":8,"endColumn":24},{"ruleId":"692","severity":1,"message":"734","line":30,"column":28,"nodeType":"694","messageId":"695","endLine":30,"endColumn":47},{"ruleId":"692","severity":1,"message":"741","line":31,"column":10,"nodeType":"694","messageId":"695","endLine":31,"endColumn":20},{"ruleId":"692","severity":1,"message":"737","line":31,"column":22,"nodeType":"694","messageId":"695","endLine":31,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":32,"column":21,"nodeType":"694","messageId":"695","endLine":32,"endColumn":33},{"ruleId":"692","severity":1,"message":"769","line":33,"column":10,"nodeType":"694","messageId":"695","endLine":33,"endColumn":21},{"ruleId":"692","severity":1,"message":"770","line":33,"column":23,"nodeType":"694","messageId":"695","endLine":33,"endColumn":37},{"ruleId":"703","severity":1,"message":"765","line":46,"column":6,"nodeType":"705","endLine":46,"endColumn":8,"suggestions":"771"},{"ruleId":"772","severity":1,"message":"773","line":80,"column":37,"nodeType":"774","messageId":"775","endLine":80,"endColumn":38},{"ruleId":"692","severity":1,"message":"764","line":210,"column":51,"nodeType":"694","messageId":"695","endLine":210,"endColumn":55},{"ruleId":"692","severity":1,"message":"776","line":28,"column":8,"nodeType":"694","messageId":"695","endLine":28,"endColumn":12},{"ruleId":"692","severity":1,"message":"758","line":37,"column":10,"nodeType":"694","messageId":"695","endLine":37,"endColumn":21},{"ruleId":"692","severity":1,"message":"747","line":37,"column":23,"nodeType":"694","messageId":"695","endLine":37,"endColumn":37},{"ruleId":"692","severity":1,"message":"748","line":38,"column":10,"nodeType":"694","messageId":"695","endLine":38,"endColumn":19},{"ruleId":"692","severity":1,"message":"749","line":38,"column":21,"nodeType":"694","messageId":"695","endLine":38,"endColumn":33},{"ruleId":"692","severity":1,"message":"746","line":43,"column":10,"nodeType":"694","messageId":"695","endLine":43,"endColumn":25},{"ruleId":"703","severity":1,"message":"777","line":47,"column":6,"nodeType":"705","endLine":47,"endColumn":8,"suggestions":"778"},{"ruleId":"692","severity":1,"message":"733","line":15,"column":3,"nodeType":"694","messageId":"695","endLine":15,"endColumn":14},{"ruleId":"692","severity":1,"message":"734","line":29,"column":28,"nodeType":"694","messageId":"695","endLine":29,"endColumn":47},{"ruleId":"692","severity":1,"message":"730","line":30,"column":20,"nodeType":"694","messageId":"695","endLine":30,"endColumn":25},{"ruleId":"692","severity":1,"message":"738","line":35,"column":22,"nodeType":"694","messageId":"695","endLine":35,"endColumn":35},{"ruleId":"692","severity":1,"message":"779","line":87,"column":13,"nodeType":"694","messageId":"695","endLine":87,"endColumn":21},{"ruleId":"692","severity":1,"message":"764","line":213,"column":51,"nodeType":"694","messageId":"695","endLine":213,"endColumn":55},{"ruleId":"692","severity":1,"message":"734","line":26,"column":28,"nodeType":"694","messageId":"695","endLine":26,"endColumn":47},{"ruleId":"692","severity":1,"message":"730","line":27,"column":20,"nodeType":"694","messageId":"695","endLine":27,"endColumn":25},{"ruleId":"692","severity":1,"message":"738","line":30,"column":22,"nodeType":"694","messageId":"695","endLine":30,"endColumn":35},{"ruleId":"692","severity":1,"message":"747","line":26,"column":23,"nodeType":"694","messageId":"695","endLine":26,"endColumn":37},{"ruleId":"692","severity":1,"message":"748","line":27,"column":10,"nodeType":"694","messageId":"695","endLine":27,"endColumn":19},{"ruleId":"692","severity":1,"message":"749","line":27,"column":21,"nodeType":"694","messageId":"695","endLine":27,"endColumn":33},{"ruleId":"692","severity":1,"message":"746","line":32,"column":10,"nodeType":"694","messageId":"695","endLine":32,"endColumn":25},{"ruleId":"703","severity":1,"message":"780","line":36,"column":6,"nodeType":"705","endLine":36,"endColumn":8,"suggestions":"781"},{"ruleId":"761","severity":1,"message":"762","line":93,"column":11,"nodeType":"763","endLine":93,"endColumn":76},{"ruleId":"692","severity":1,"message":"734","line":23,"column":28,"nodeType":"694","messageId":"695","endLine":23,"endColumn":47},{"ruleId":"692","severity":1,"message":"730","line":25,"column":20,"nodeType":"694","messageId":"695","endLine":25,"endColumn":25},{"ruleId":"692","severity":1,"message":"738","line":28,"column":22,"nodeType":"694","messageId":"695","endLine":28,"endColumn":35},{"ruleId":"692","severity":1,"message":"753","line":37,"column":10,"nodeType":"694","messageId":"695","endLine":37,"endColumn":22},{"ruleId":"703","severity":1,"message":"782","line":42,"column":6,"nodeType":"705","endLine":42,"endColumn":8,"suggestions":"783"},{"ruleId":"692","severity":1,"message":"734","line":28,"column":28,"nodeType":"694","messageId":"695","endLine":28,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":29,"column":22,"nodeType":"694","messageId":"695","endLine":29,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":30,"column":21,"nodeType":"694","messageId":"695","endLine":30,"endColumn":33},{"ruleId":"692","severity":1,"message":"753","line":40,"column":10,"nodeType":"694","messageId":"695","endLine":40,"endColumn":22},{"ruleId":"703","severity":1,"message":"765","line":45,"column":6,"nodeType":"705","endLine":45,"endColumn":8,"suggestions":"784"},{"ruleId":"692","severity":1,"message":"764","line":310,"column":49,"nodeType":"694","messageId":"695","endLine":310,"endColumn":53},{"ruleId":"692","severity":1,"message":"785","line":9,"column":21,"nodeType":"694","messageId":"695","endLine":9,"endColumn":28},{"ruleId":"692","severity":1,"message":"786","line":20,"column":3,"nodeType":"694","messageId":"695","endLine":20,"endColumn":10},{"ruleId":"692","severity":1,"message":"733","line":23,"column":3,"nodeType":"694","messageId":"695","endLine":23,"endColumn":14},{"ruleId":"692","severity":1,"message":"787","line":24,"column":3,"nodeType":"694","messageId":"695","endLine":24,"endColumn":13},{"ruleId":"692","severity":1,"message":"788","line":25,"column":3,"nodeType":"694","messageId":"695","endLine":25,"endColumn":18},{"ruleId":"692","severity":1,"message":"745","line":27,"column":10,"nodeType":"694","messageId":"695","endLine":27,"endColumn":14},{"ruleId":"692","severity":1,"message":"789","line":28,"column":10,"nodeType":"694","messageId":"695","endLine":28,"endColumn":15},{"ruleId":"692","severity":1,"message":"790","line":31,"column":10,"nodeType":"694","messageId":"695","endLine":31,"endColumn":26},{"ruleId":"692","severity":1,"message":"734","line":31,"column":28,"nodeType":"694","messageId":"695","endLine":31,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":32,"column":22,"nodeType":"694","messageId":"695","endLine":32,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":33,"column":21,"nodeType":"694","messageId":"695","endLine":33,"endColumn":33},{"ruleId":"703","severity":1,"message":"765","line":45,"column":6,"nodeType":"705","endLine":45,"endColumn":8,"suggestions":"791"},{"ruleId":"692","severity":1,"message":"792","line":109,"column":15,"nodeType":"694","messageId":"695","endLine":109,"endColumn":22},{"ruleId":"692","severity":1,"message":"793","line":170,"column":35,"nodeType":"694","messageId":"695","endLine":170,"endColumn":39},{"ruleId":"692","severity":1,"message":"794","line":170,"column":41,"nodeType":"694","messageId":"695","endLine":170,"endColumn":47},{"ruleId":"692","severity":1,"message":"764","line":170,"column":49,"nodeType":"694","messageId":"695","endLine":170,"endColumn":53},{"ruleId":"692","severity":1,"message":"795","line":24,"column":10,"nodeType":"694","messageId":"695","endLine":24,"endColumn":20},{"ruleId":"692","severity":1,"message":"747","line":29,"column":23,"nodeType":"694","messageId":"695","endLine":29,"endColumn":37},{"ruleId":"692","severity":1,"message":"748","line":30,"column":10,"nodeType":"694","messageId":"695","endLine":30,"endColumn":19},{"ruleId":"692","severity":1,"message":"749","line":30,"column":21,"nodeType":"694","messageId":"695","endLine":30,"endColumn":33},{"ruleId":"692","severity":1,"message":"746","line":35,"column":10,"nodeType":"694","messageId":"695","endLine":35,"endColumn":25},{"ruleId":"703","severity":1,"message":"796","line":39,"column":6,"nodeType":"705","endLine":39,"endColumn":8,"suggestions":"797"},{"ruleId":"761","severity":1,"message":"762","line":99,"column":11,"nodeType":"763","endLine":99,"endColumn":79},{"ruleId":"692","severity":1,"message":"767","line":20,"column":8,"nodeType":"694","messageId":"695","endLine":20,"endColumn":14},{"ruleId":"692","severity":1,"message":"798","line":26,"column":10,"nodeType":"694","messageId":"695","endLine":26,"endColumn":19},{"ruleId":"692","severity":1,"message":"734","line":29,"column":28,"nodeType":"694","messageId":"695","endLine":29,"endColumn":47},{"ruleId":"692","severity":1,"message":"730","line":33,"column":20,"nodeType":"694","messageId":"695","endLine":33,"endColumn":25},{"ruleId":"692","severity":1,"message":"741","line":35,"column":10,"nodeType":"694","messageId":"695","endLine":35,"endColumn":20},{"ruleId":"692","severity":1,"message":"753","line":47,"column":10,"nodeType":"694","messageId":"695","endLine":47,"endColumn":22},{"ruleId":"692","severity":1,"message":"764","line":367,"column":51,"nodeType":"694","messageId":"695","endLine":367,"endColumn":55},{"ruleId":"692","severity":1,"message":"734","line":29,"column":28,"nodeType":"694","messageId":"695","endLine":29,"endColumn":47},{"ruleId":"692","severity":1,"message":"753","line":31,"column":10,"nodeType":"694","messageId":"695","endLine":31,"endColumn":22},{"ruleId":"692","severity":1,"message":"737","line":33,"column":22,"nodeType":"694","messageId":"695","endLine":33,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":34,"column":21,"nodeType":"694","messageId":"695","endLine":34,"endColumn":33},{"ruleId":"703","severity":1,"message":"765","line":47,"column":6,"nodeType":"705","endLine":47,"endColumn":8,"suggestions":"799"},{"ruleId":"772","severity":1,"message":"773","line":63,"column":37,"nodeType":"774","messageId":"775","endLine":63,"endColumn":38},{"ruleId":"692","severity":1,"message":"764","line":284,"column":51,"nodeType":"694","messageId":"695","endLine":284,"endColumn":55},{"ruleId":"692","severity":1,"message":"786","line":20,"column":3,"nodeType":"694","messageId":"695","endLine":20,"endColumn":10},{"ruleId":"692","severity":1,"message":"733","line":23,"column":3,"nodeType":"694","messageId":"695","endLine":23,"endColumn":14},{"ruleId":"692","severity":1,"message":"787","line":24,"column":3,"nodeType":"694","messageId":"695","endLine":24,"endColumn":13},{"ruleId":"692","severity":1,"message":"788","line":25,"column":3,"nodeType":"694","messageId":"695","endLine":25,"endColumn":18},{"ruleId":"692","severity":1,"message":"790","line":30,"column":10,"nodeType":"694","messageId":"695","endLine":30,"endColumn":26},{"ruleId":"692","severity":1,"message":"734","line":30,"column":28,"nodeType":"694","messageId":"695","endLine":30,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":31,"column":22,"nodeType":"694","messageId":"695","endLine":31,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":32,"column":21,"nodeType":"694","messageId":"695","endLine":32,"endColumn":33},{"ruleId":"703","severity":1,"message":"765","line":43,"column":6,"nodeType":"705","endLine":43,"endColumn":8,"suggestions":"800"},{"ruleId":"692","severity":1,"message":"792","line":88,"column":15,"nodeType":"694","messageId":"695","endLine":88,"endColumn":22},{"ruleId":"692","severity":1,"message":"801","line":89,"column":15,"nodeType":"694","messageId":"695","endLine":89,"endColumn":27},{"ruleId":"692","severity":1,"message":"802","line":90,"column":15,"nodeType":"694","messageId":"695","endLine":90,"endColumn":25},{"ruleId":"692","severity":1,"message":"734","line":28,"column":28,"nodeType":"694","messageId":"695","endLine":28,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":29,"column":22,"nodeType":"694","messageId":"695","endLine":29,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":30,"column":21,"nodeType":"694","messageId":"695","endLine":30,"endColumn":33},{"ruleId":"703","severity":1,"message":"765","line":41,"column":6,"nodeType":"705","endLine":41,"endColumn":8,"suggestions":"803"},{"ruleId":"692","severity":1,"message":"734","line":31,"column":28,"nodeType":"694","messageId":"695","endLine":31,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":32,"column":22,"nodeType":"694","messageId":"695","endLine":32,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":33,"column":21,"nodeType":"694","messageId":"695","endLine":33,"endColumn":33},{"ruleId":"703","severity":1,"message":"765","line":43,"column":6,"nodeType":"705","endLine":43,"endColumn":8,"suggestions":"804"},{"ruleId":"692","severity":1,"message":"737","line":26,"column":22,"nodeType":"694","messageId":"695","endLine":26,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":27,"column":21,"nodeType":"694","messageId":"695","endLine":27,"endColumn":33},{"ruleId":"703","severity":1,"message":"765","line":37,"column":6,"nodeType":"705","endLine":37,"endColumn":8,"suggestions":"805"},{"ruleId":"703","severity":1,"message":"806","line":18,"column":6,"nodeType":"705","endLine":18,"endColumn":8,"suggestions":"807"},{"ruleId":"692","severity":1,"message":"712","line":1,"column":27,"nodeType":"694","messageId":"695","endLine":1,"endColumn":33},{"ruleId":"692","severity":1,"message":"734","line":27,"column":28,"nodeType":"694","messageId":"695","endLine":27,"endColumn":47},{"ruleId":"692","severity":1,"message":"730","line":28,"column":20,"nodeType":"694","messageId":"695","endLine":28,"endColumn":25},{"ruleId":"692","severity":1,"message":"738","line":33,"column":22,"nodeType":"694","messageId":"695","endLine":33,"endColumn":35},{"ruleId":"692","severity":1,"message":"786","line":20,"column":3,"nodeType":"694","messageId":"695","endLine":20,"endColumn":10},{"ruleId":"692","severity":1,"message":"808","line":24,"column":8,"nodeType":"694","messageId":"695","endLine":24,"endColumn":14},{"ruleId":"692","severity":1,"message":"789","line":26,"column":10,"nodeType":"694","messageId":"695","endLine":26,"endColumn":15},{"ruleId":"692","severity":1,"message":"790","line":29,"column":10,"nodeType":"694","messageId":"695","endLine":29,"endColumn":26},{"ruleId":"692","severity":1,"message":"734","line":29,"column":28,"nodeType":"694","messageId":"695","endLine":29,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":30,"column":22,"nodeType":"694","messageId":"695","endLine":30,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":31,"column":21,"nodeType":"694","messageId":"695","endLine":31,"endColumn":33},{"ruleId":"692","severity":1,"message":"809","line":32,"column":10,"nodeType":"694","messageId":"695","endLine":32,"endColumn":22},{"ruleId":"703","severity":1,"message":"765","line":43,"column":6,"nodeType":"705","endLine":43,"endColumn":8,"suggestions":"810"},{"ruleId":"692","severity":1,"message":"801","line":109,"column":15,"nodeType":"694","messageId":"695","endLine":109,"endColumn":27},{"ruleId":"692","severity":1,"message":"802","line":110,"column":15,"nodeType":"694","messageId":"695","endLine":110,"endColumn":25},{"ruleId":"692","severity":1,"message":"811","line":112,"column":15,"nodeType":"694","messageId":"695","endLine":112,"endColumn":28},{"ruleId":"692","severity":1,"message":"764","line":170,"column":51,"nodeType":"694","messageId":"695","endLine":170,"endColumn":55},{"ruleId":"761","severity":1,"message":"762","line":227,"column":23,"nodeType":"763","endLine":230,"endColumn":25},{"ruleId":"692","severity":1,"message":"786","line":20,"column":3,"nodeType":"694","messageId":"695","endLine":20,"endColumn":10},{"ruleId":"692","severity":1,"message":"745","line":24,"column":10,"nodeType":"694","messageId":"695","endLine":24,"endColumn":14},{"ruleId":"692","severity":1,"message":"789","line":25,"column":10,"nodeType":"694","messageId":"695","endLine":25,"endColumn":15},{"ruleId":"692","severity":1,"message":"790","line":28,"column":10,"nodeType":"694","messageId":"695","endLine":28,"endColumn":26},{"ruleId":"692","severity":1,"message":"734","line":28,"column":28,"nodeType":"694","messageId":"695","endLine":28,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":29,"column":22,"nodeType":"694","messageId":"695","endLine":29,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":30,"column":21,"nodeType":"694","messageId":"695","endLine":30,"endColumn":33},{"ruleId":"703","severity":1,"message":"765","line":41,"column":6,"nodeType":"705","endLine":41,"endColumn":8,"suggestions":"812"},{"ruleId":"692","severity":1,"message":"792","line":90,"column":15,"nodeType":"694","messageId":"695","endLine":90,"endColumn":22},{"ruleId":"692","severity":1,"message":"793","line":140,"column":35,"nodeType":"694","messageId":"695","endLine":140,"endColumn":39},{"ruleId":"692","severity":1,"message":"794","line":140,"column":41,"nodeType":"694","messageId":"695","endLine":140,"endColumn":47},{"ruleId":"692","severity":1,"message":"764","line":140,"column":49,"nodeType":"694","messageId":"695","endLine":140,"endColumn":53},{"ruleId":"692","severity":1,"message":"786","line":20,"column":3,"nodeType":"694","messageId":"695","endLine":20,"endColumn":10},{"ruleId":"692","severity":1,"message":"808","line":24,"column":8,"nodeType":"694","messageId":"695","endLine":24,"endColumn":14},{"ruleId":"692","severity":1,"message":"789","line":26,"column":10,"nodeType":"694","messageId":"695","endLine":26,"endColumn":15},{"ruleId":"692","severity":1,"message":"790","line":29,"column":10,"nodeType":"694","messageId":"695","endLine":29,"endColumn":26},{"ruleId":"692","severity":1,"message":"734","line":29,"column":28,"nodeType":"694","messageId":"695","endLine":29,"endColumn":47},{"ruleId":"692","severity":1,"message":"737","line":30,"column":22,"nodeType":"694","messageId":"695","endLine":30,"endColumn":35},{"ruleId":"692","severity":1,"message":"735","line":31,"column":21,"nodeType":"694","messageId":"695","endLine":31,"endColumn":33},{"ruleId":"692","severity":1,"message":"813","line":32,"column":10,"nodeType":"694","messageId":"695","endLine":32,"endColumn":19},{"ruleId":"703","severity":1,"message":"765","line":43,"column":6,"nodeType":"705","endLine":43,"endColumn":8,"suggestions":"814"},{"ruleId":"692","severity":1,"message":"801","line":108,"column":15,"nodeType":"694","messageId":"695","endLine":108,"endColumn":27},{"ruleId":"692","severity":1,"message":"802","line":109,"column":15,"nodeType":"694","messageId":"695","endLine":109,"endColumn":25},{"ruleId":"692","severity":1,"message":"811","line":111,"column":15,"nodeType":"694","messageId":"695","endLine":111,"endColumn":28},{"ruleId":"692","severity":1,"message":"764","line":142,"column":49,"nodeType":"694","messageId":"695","endLine":142,"endColumn":53},{"ruleId":"761","severity":1,"message":"762","line":219,"column":23,"nodeType":"763","endLine":222,"endColumn":25},{"ruleId":"692","severity":1,"message":"815","line":54,"column":22,"nodeType":"694","messageId":"695","endLine":54,"endColumn":26},{"ruleId":"692","severity":1,"message":"701","line":59,"column":8,"nodeType":"694","messageId":"695","endLine":59,"endColumn":16},{"ruleId":"692","severity":1,"message":"816","line":60,"column":8,"nodeType":"694","messageId":"695","endLine":60,"endColumn":16},{"ruleId":"703","severity":1,"message":"817","line":112,"column":6,"nodeType":"705","endLine":112,"endColumn":8,"suggestions":"818"},{"ruleId":"692","severity":1,"message":"819","line":115,"column":7,"nodeType":"694","messageId":"695","endLine":115,"endColumn":14},{"ruleId":"692","severity":1,"message":"741","line":119,"column":10,"nodeType":"694","messageId":"695","endLine":119,"endColumn":20},{"ruleId":"692","severity":1,"message":"820","line":34,"column":9,"nodeType":"694","messageId":"695","endLine":34,"endColumn":13},{"ruleId":"692","severity":1,"message":"743","line":3,"column":36,"nodeType":"694","messageId":"695","endLine":3,"endColumn":42},{"ruleId":"703","severity":1,"message":"821","line":11,"column":6,"nodeType":"705","endLine":11,"endColumn":8,"suggestions":"822"},{"ruleId":"692","severity":1,"message":"743","line":3,"column":36,"nodeType":"694","messageId":"695","endLine":3,"endColumn":42},{"ruleId":"703","severity":1,"message":"823","line":11,"column":6,"nodeType":"705","endLine":11,"endColumn":8,"suggestions":"824"},{"ruleId":"692","severity":1,"message":"825","line":3,"column":10,"nodeType":"694","messageId":"695","endLine":3,"endColumn":20},{"ruleId":"692","severity":1,"message":"826","line":5,"column":10,"nodeType":"694","messageId":"695","endLine":5,"endColumn":19},{"ruleId":"692","severity":1,"message":"827","line":9,"column":16,"nodeType":"694","messageId":"695","endLine":9,"endColumn":23},{"ruleId":"692","severity":1,"message":"828","line":10,"column":10,"nodeType":"694","messageId":"695","endLine":10,"endColumn":18},{"ruleId":"692","severity":1,"message":"741","line":11,"column":10,"nodeType":"694","messageId":"695","endLine":11,"endColumn":20},{"ruleId":"692","severity":1,"message":"737","line":11,"column":22,"nodeType":"694","messageId":"695","endLine":11,"endColumn":35},{"ruleId":"696","replacedBy":"829"},{"ruleId":"698","replacedBy":"830"},{"ruleId":"692","severity":1,"message":"741","line":19,"column":10,"nodeType":"694","messageId":"695","endLine":19,"endColumn":20},{"ruleId":"703","severity":1,"message":"831","line":83,"column":6,"nodeType":"705","endLine":83,"endColumn":8,"suggestions":"832"},"no-unused-vars","'PDFViewer' is defined but never used.","Identifier","unusedVar","no-native-reassign",["833"],"no-negated-in-lhs",["834"],"'socketIOClient' is defined but never used.","'ReactPDF' is defined but never used.","'MyDocument' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getProfile'. Either include it or remove the dependency array.","ArrayExpression",["835"],"'EditStore' is defined but never used.","'Wellcome' is defined but never used.","'SellCounts' is defined but never used.","'ProductCounts' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'NavLink' is defined but never used.","'Check' is defined but never used.","'Phone' is defined but never used.","'Calendar' is defined but never used.","'Checkbox' is defined but never used.","'TOKEN_KEY' is defined but never used.","'moment' is defined but never used.","'dispatch' is assigned a value but never used.","'setInitValues' is assigned a value but never used.","'NavItem' is defined but never used.","'Sun' is defined but never used.","'Moon' is defined but never used.","'userId' is assigned a value but never used.","'token' is assigned a value but never used.","'onChangePassword' is assigned a value but never used.","'history' is defined but never used.","'useSelector' is defined but never used.","'match' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadAdminProfile'. Either include it or remove the dependency array.",["836"],"'CustomInput' is defined but never used.","'setShowSubmitLoader' is assigned a value but never used.","'setErrorText' is assigned a value but never used.","'fileUploader' is assigned a value but never used.","'setShowLoader' is assigned a value but never used.","'setFormValues' is assigned a value but never used.","'API_URL' is defined but never used.","'axios' is defined but never used.","'showLoader' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'Button' is defined but never used.","'IsActiveLabel' is defined but never used.","'Link' is defined but never used.","'showDeleteAlert' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'totalPage' is assigned a value but never used.","'setTotalPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getComplaintLists'. Either include it or remove the dependency array.",["837"],"'image' is assigned a value but never used.","'removedImage' is assigned a value but never used.","'onFileChange' is assigned a value but never used.","'onRemoveFile' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser?.image'. Either include it or remove the dependency array.",["838"],"'currentPage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'purchaseList'. Either include it or remove the dependency array.",["839"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'form' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["840"],"'Loader' is defined but never used.","'ProductService' is defined but never used.","'productList' is assigned a value but never used.","'setProductList' is assigned a value but never used.",["841"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'salesLists'. Either include it or remove the dependency array.",["842"],"'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStoreList'. Either include it or remove the dependency array.",["843"],"React Hook useEffect has a missing dependency: 'getStoreLists'. Either include it or remove the dependency array.",["844"],["845"],"'R_TOKEN' is defined but never used.","'Spinner' is defined but never used.","'InputGroup' is defined but never used.","'InputGroupAddon' is defined but never used.","'toast' is defined but never used.","'showSubmitLoader' is assigned a value but never used.",["846"],"'touched' is assigned a value but never used.","'push' is assigned a value but never used.","'remove' is assigned a value but never used.","'AmpStories' is defined but never used.","React Hook useEffect has a missing dependency: 'productList'. Either include it or remove the dependency array.",["847"],"'useParams' is defined but never used.",["848"],["849"],"'handleChange' is assigned a value but never used.","'handleBlur' is assigned a value but never used.",["850"],["851"],["852"],"React Hook useEffect has a missing dependency: 'subCategoryList'. Either include it or remove the dependency array.",["853"],"'Select' is defined but never used.","'productImage' is assigned a value but never used.",["854"],"'setFieldValue' is assigned a value but never used.",["855"],"'billImage' is assigned a value but never used.",["856"],"'View' is defined but never used.","'ReactDOM' is defined but never used.","React Hook useEffect has a missing dependency: 'invoiceList'. Either include it or remove the dependency array.",["857"],"'history' is assigned a value but never used.","'date' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'SaleCount'. Either include it or remove the dependency array.",["858"],"React Hook useEffect has a missing dependency: 'ProductCount'. Either include it or remove the dependency array.",["859"],"'CreditCard' is defined but never used.","'DashBoard' is defined but never used.","'setData' is assigned a value but never used.","'dataList' is assigned a value but never used.",["833"],["834"],"React Hook useEffect has missing dependencies: 'ComplaintCount' and 'PurchaseCount'. Either include them or remove the dependency array.",["860"],"no-global-assign","no-unsafe-negation",{"desc":"861","fix":"862"},{"desc":"863","fix":"864"},{"desc":"865","fix":"866"},{"desc":"867","fix":"868"},{"desc":"869","fix":"870"},{"desc":"871","fix":"872"},{"desc":"871","fix":"873"},{"desc":"874","fix":"875"},{"desc":"876","fix":"877"},{"desc":"878","fix":"879"},{"desc":"871","fix":"880"},{"desc":"871","fix":"881"},{"desc":"882","fix":"883"},{"desc":"871","fix":"884"},{"desc":"871","fix":"885"},{"desc":"871","fix":"886"},{"desc":"871","fix":"887"},{"desc":"871","fix":"888"},{"desc":"889","fix":"890"},{"desc":"871","fix":"891"},{"desc":"871","fix":"892"},{"desc":"871","fix":"893"},{"desc":"894","fix":"895"},{"desc":"896","fix":"897"},{"desc":"898","fix":"899"},{"desc":"900","fix":"901"},"Update the dependencies array to be: [getProfile]",{"range":"902","text":"903"},"Update the dependencies array to be: [loadAdminProfile]",{"range":"904","text":"905"},"Update the dependencies array to be: [getComplaintLists]",{"range":"906","text":"907"},"Update the dependencies array to be: [currentUser?.image]",{"range":"908","text":"909"},"Update the dependencies array to be: [purchaseList]",{"range":"910","text":"911"},"Update the dependencies array to be: [loadData]",{"range":"912","text":"913"},{"range":"914","text":"913"},"Update the dependencies array to be: [salesLists]",{"range":"915","text":"916"},"Update the dependencies array to be: [getStoreList]",{"range":"917","text":"918"},"Update the dependencies array to be: [getStoreLists]",{"range":"919","text":"920"},{"range":"921","text":"913"},{"range":"922","text":"913"},"Update the dependencies array to be: [productList]",{"range":"923","text":"924"},{"range":"925","text":"913"},{"range":"926","text":"913"},{"range":"927","text":"913"},{"range":"928","text":"913"},{"range":"929","text":"913"},"Update the dependencies array to be: [subCategoryList]",{"range":"930","text":"931"},{"range":"932","text":"913"},{"range":"933","text":"913"},{"range":"934","text":"913"},"Update the dependencies array to be: [invoiceList]",{"range":"935","text":"936"},"Update the dependencies array to be: [SaleCount]",{"range":"937","text":"938"},"Update the dependencies array to be: [ProductCount]",{"range":"939","text":"940"},"Update the dependencies array to be: [ComplaintCount, PurchaseCount]",{"range":"941","text":"942"},[994,996],"[getProfile]",[589,591],"[loadAdminProfile]",[1235,1237],"[getComplaintLists]",[1457,1459],"[currentUser?.image]",[1141,1143],"[purchaseList]",[1200,1202],"[loadData]",[1272,1274],[1201,1203],"[salesLists]",[1076,1078],"[getStoreList]",[1151,1153],"[getStoreLists]",[1238,1240],[1159,1161],[1200,1202],"[productList]",[1321,1323],[1063,1065],[1049,1051],[1100,1102],[879,881],[692,694],"[subCategoryList]",[1136,1138],[1040,1042],[1127,1129],[3136,3138],"[invoiceList]",[342,344],"[SaleCount]",[348,350],"[ProductCount]",[1948,1950],"[ComplaintCount, PurchaseCount]"]